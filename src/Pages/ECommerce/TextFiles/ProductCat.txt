import React from 'react';
import axios from 'axios';
import './ECommerce.css';
import '../Page.css';
import CustomBtn from '../../Components/UI-Controls/Buttons/Btn';
import SearchBar from '../../Components/UI-Controls/SearchBar/Search';
import searchIcon from '../../Assets/Images/Search Bar 20 x 20.png';
import actionIcon from '../../Assets/Images/ActionBtn 30 x 30.png';
import uploadIcon from '../../Assets/Images/UploadImg 24 x 24.png';
import arrowDown from '../../Assets/Images/dropdown 20 x 20.png';
import arrowUp from '../../Assets/Images/dropup 20 x 20.png';
import DataTable from 'react-data-table-component';
import CustomPagination from '../../Components/UI-Controls/Pagination/Pagination';
import { useState, useEffect } from 'react';
import Select from 'react-select';
import CustomDropdown from '../../Components/UI-Controls/Dropdown/dropdown';

const ProductsCat = () => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [categoryData, setCategoryData] = useState({
    name: '',
    slug: '',
    parentCategory: '',
    description: '',
    displayType: '',
    menuOrder: '',
    permalink: '',
  });
  const [imagePreview, setImagePreview] = useState(null);
  const [isOpen, setIsOpen] = useState(false);
  const rowsPerPage = 10; // Number of rows per page

  useEffect(() => {
    console.log('Fetching data...');
    fetchTableData();
  }, []);

  useEffect(() => {
    // Set static data instead of fetching from API
    const staticData = [
      {
        id: 1,
        name: 'Leanne Graham',
        status: 'Published',
        image: '', // Example image URL
        address: { zipcode: '12345', city: 'Gwenborough', street: 'Kulas Light' },
        username: 'In-Stock',
        price: 100.00,
        email: 'user1@example.com',
      },
      {
        id: 2,
        name: 'Ervin Howell',
        status: 'Drafted',
        image: '',
        address: { zipcode: '12346', city: 'Romaguera', street: 'Victor Plains' },
        username: 'Out of Stock',
        price: 200.00,
        email: 'user2@example.com',
      },
      {
        id: 3,
        name: 'Clementine Bauch',
        status: 'Published',
        image: '',
        address: { zipcode: '12347', city: 'Lebsackbury', street: 'Douglas Extension' },
        username: 'In-Stock',
        price: 300.00,
        email: 'user3@example.com',
      },
      {
        id: 4,
        name: 'Patricia Lebsack',
        status: 'Drafted',
        image: '',
        address: { zipcode: '12348', city: 'South Elvis', street: 'Hoeger Mall' },
        username: 'Back Order',
        price: 400.00,
        email: 'user4@example.com',
      },
      {
        id: 5,
        name: 'Chelsey Dietrich',
        status: 'Published',
        image: '',
        address: { zipcode: '12349', city: 'Roscoeview', street: 'Skiles Walks' },
        username: 'In-Stock',
        price: 150.00,
        email: 'user5@example.com',
      },
      {
        id: 6,
        name: 'Mrs. Dennis Schulist',
        status: 'Drafted',
        image: '',
        address: { zipcode: '12350', city: 'Lehman', street: 'Norberto Crossing' },
        username: 'Back Order',
        price: 250.00,
        email: 'user6@example.com',
      },
      {
        id: 7,
        name: 'Kurtis Weissnat',
        status: 'Published',
        image: '',
        address: { zipcode: '12351', city: 'Howemouth', street: 'Rex Trail' },
        username: 'In-Stock',
        price: 350.00,
        email: 'user7@example.com',
      },
      {
        id: 8,
        name: 'Nicholas Runolfsdottir V',
        status: 'Drafted',
        image: '',
        address: { zipcode: '12352', city: 'Aliyaview', street: 'Ellsworth Summit' },
        username: 'Back Order',
        price: 450.00,
        email: 'user8@example.com',
      },
      {
        id: 9,
        name: 'Glenna Reichert',
        status: 'Published',
        image: '',
        address: { zipcode: '12353', city: 'Bartholomebury', street: 'Dayna Park' },
        username: 'In-Stock',
        price: 550.00,
        email: 'user9@example.com',
      },
      {
        id: 10,
        name: 'Clementina DuBuque',
        status: 'Drafted',
        image: '',
        address: { zipcode: '12354', city: 'Lebsackbury', street: 'Kovacek Fields' },
        username: 'Back Order',
        price: 650.00,
        email: 'user10@example.com',
      },
    ];

    setData(staticData); // Use static data directly
  }, []);

  async function fetchTableData() {
    setLoading(true);
    // The API call can be removed or kept for other user data if needed.
    const URL = 'https://jsonplaceholder.typicode.com/users';
    const response = await fetch(URL);
    const users = await response.json();
    setLoading(false);
  }

  const handleSearch = () => console.log('Search has been triggered');
  const handleAddCat = () => console.log('Category add button has been clicked');

  const handlePageChange = (page) => {
    setCurrentPage(page);
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setCategoryData({ ...categoryData, [name]: value });

    if (name === 'slug') {
      // Auto-generate permalink when slug is updated
      setCategoryData({
        ...categoryData,
        slug: value,
        permalink: `https://myfurnituremecca/category/${value}`,
      });
    }
  };

  const handleImageUpload = (event) => {
    const file = event.target.files[0];
    const reader = new FileReader();
    reader.onload = () => {
      setImagePreview(reader.result);
    };
    if (file) {
      reader.readAsDataURL(file);
    }
  };

  // Handle dropdown open/close toggle
  const toggleDropdown = () => {
    setIsOpen(!isOpen);
  };

  const handleAddCate = async () => {
    // Create a FormData object
    const formData = new FormData();

    // Append form data
    formData.append('name', categoryData.name);
    formData.append('slug', categoryData.slug);
    formData.append('parentCategory', categoryData.parentCategory);
    formData.append('description', categoryData.description);
    formData.append('displayType', categoryData.displayType);
    formData.append('menuOrder', categoryData.menuOrder);

    // Append permalink to the FormData
    formData.append('permalink', categoryData.permalink);

    // Append image file if exists
    const bannerImageInput = document.getElementById('bannerImage');
    if (bannerImageInput.files[0]) {
      formData.append('bannerImage', bannerImageInput.files[0]);
    }

    try {
      setLoading(true); // Start loading state
      console.log('Form submission started with data:', categoryData);

      const response = await axios.post('https://yourapi.com/endpoint', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      // Handle successful response
      console.log('Form submission successful:', response.data);

      // Optionally reset the form or update the UI here
      setCategoryData({
        name: '',
        slug: '',
        parentCategory: '',
        description: '',
        displayType: '',
        menuOrder: '',
        permalink: '', // Reset permalink as well
      });
      setImagePreview(null); // Reset image preview
    } catch (error) {
      // Detailed error handling
      if (error.response) {
        // Server responded with a status other than 2xx
        console.error('Error submitting form:', {
          status: error.response.status,
          data: error.response.data,
          headers: error.response.headers,
        });
        alert(`Error: ${error.response.data.message || 'An error occurred. Please try again.'}`);
      } else if (error.request) {
        // Request was made but no response was received
        console.error('Error: No response received:', error.request);
        alert('Error: No response from server. Please check your connection and try again.');
      } else {
        // Something else caused the error
        console.error('Error:', error.message);
        alert('Error: ' + error.message);
      }

      // Optionally reset the form state or handle the error state here
      // setCategoryData({...}); // Reset if necessary
    } finally {
      setLoading(false); // End loading state
      console.log('Form submission ended.');
    }
  };

  const customStyles = {
    headCells: {
      style: {
        height: '52px',
        borderRadius: '5px 5px 5px 5px',
        background: '#FDFDFD',
        opacity: '1',
        textAlign: 'center',
        justifyContent: 'center',
        border: 'none',
        color: 'var(--text-color)',
        fontFamily: 'poppins',
        fontWeight: '500',
        fontSize: '14px',
        overflow: 'wrap', // Prevents content overflow in headers
        textOverflow: 'ellipsis',
        whiteSpace: 'normal', // Allows wrapping in header cells
      },
    },
    cells: {
      style: {
        height: '66px',
        justifyContent: 'center',
        textAlign: 'center',
        background: '#FFFFFF',
        borderTop: '1px solid #F0F0F0',
        borderRight: 'none',
        color: '#858585',
        fontFamily: 'poppins',
        fontWeight: '400',
        fontSize: '12px',
        whiteSpace: 'normal', // Allows text to wrap in cells
        wordBreak: 'break-word', // Breaks long words if necessary
        overflow: 'wrap', // Prevents content overflow
        textOverflow: 'ellipsis', // Shows ellipsis for long content
      },
    },
  };

  const columns = [
    {
      name: (
        <input
          type="checkbox"
          style={{ margin: 0 }}
          onChange={(e) => console.log('All selected:', e.target.checked)}
        />
      ),
      cell: (row) => (
        <input
          type="checkbox"
          style={{ margin: 0 }}
          onChange={(e) => console.log('Selected:', row, e.target.checked)}
        />
      ),
      ignoreRowClick: true,
      allowOverflow: true,
      button: true,
      width: '50px', // Assign a width for this checkbox column
    },
    {
      name: 'Image',
      selector: (row) => row.image,
      width: '100px', // Assign custom width
    },
    {
      name: 'Name',
      selector: (row) => row.name,
      width: '120px', // Assign custom width
    },
    {
      name: 'Parent Category',
      selector: (row) => row.name,
      width: '150px', // Assign custom width
    },
    {
      name: 'Slug',
      selector: (row) => row.name,
      width: '100px', // Assign custom width
    },
    {
      name: 'Count',
      selector: (row) => row.price, // Assuming you want the price
      width: '80px', // Assign custom width
    },
    {
      name: 'Action',
      cell: (row) => (
        <img
          src={actionIcon}
          alt="Action Icon"
          width="30"
          height="30"
          style={{ cursor: 'pointer' }}
          onClick={() => console.log('Action clicked for:', row)}
        />
      ),
      width: '120px', // Assign custom width for action column
    },
  ];

  const options = [
    { value: 'parent1', label: 'Parent Category 1' },
    { value: 'parent2', label: 'Parent Category 2' },
  ];

  // Options for the dropdown
  const dropdownOptions = [
    { value: 'parent1', label: 'Parent Category 1' },
    { value: 'parent2', label: 'Parent Category 2' },
    { value: 'parent3', label: 'Parent Category 3' },
  ];

  // Handler for dropdown change
  const handleInputChange1 = (selectedValue) => {
    setCategoryData((prevState) => ({
      ...prevState,
      parentCategory: selectedValue,  // Update the state with selected value
    }));
  };


  return (
    <div className="ProductCatPage">
      <div className="CatSection-01">
        <span className='Section1-Leftside'>
          Categories
        </span>
        <div className='Section1-Rightside'>
          <SearchBar onSearch={handleSearch} icon={searchIcon} placeholder="Search category by name" />
        </div>
      </div>

      <div className="CatSection-02">
        <div className='Section2-Leftside'>
          <div className='Header'>Add New Category</div>
          {/* <div className="NewCat-Add">

            <div className="form-row">
              <label htmlFor="name">Name<span className='superscript'>*</span></label>
              <input
                type="text"
                id="name"
                name="name"
                placeholder="Enter Category Name..."
                value={categoryData.name}
                onChange={handleInputChange}
              />
            </div>

            <div className="form-row">
              <label htmlFor="slug">Slug<span className='superscript'>*</span></label>
              <input
                type="text"
                id="slug"
                name="slug"
                placeholder="Enter Slug..."
                value={categoryData.slug}
                onChange={handleInputChange}
              />
            </div>

            <div className="form-row">
              <label htmlFor="menuOrder">Menu Order<span className='superscript'>*</span></label>
              <input
                type="text"
                id="menuOrder"
                name="menuOrder"
                placeholder='Enter Menu Order...'
                value={categoryData.menuOrder}
                onChange={handleInputChange}
              />
            </div>

            <div className="form-row">
              <label htmlFor="parentCategory">Parent Category<span className='superscript'>*</span></label>
              <select
                id="parentCategory"
                name="parentCategory"
                value={categoryData.parentCategory}
                onChange={handleInputChange}
              >
                <option value="">Select Parent Category</option>
                <option value="parent1">Parent Category 1</option>
                <option value="parent2">Parent Category 2</option>
              </select>
            </div>

            <div className="form-row">
              <label htmlFor="description">Description</label>
              <textarea
                id="description"
                name="description"
                placeholder='Enter Product Description here...'
                value={categoryData.description}
                onChange={handleInputChange}
              />
            </div>

            <div className="form-row">
              <label htmlFor="displayType">Display Type<span className='superscript'>*</span></label>
              <select
                id="displayType"
                name="displayType"
                value={categoryData.displayType}
                onChange={handleInputChange}
              >
                <option value="">Select Display Type</option>
                <option value="grid">Show</option>
                <option value="list">Hide</option>
              </select>
            </div>

            <div className="form-row">
              <label htmlFor="bannerImage">Banner Image</label>
              <div className="banner-upload">
                <label htmlFor="bannerImage" className="upload-label">
                  <div className="upload-button">
                    <img
                      src={uploadIcon}
                      alt=""
                      className="uploaded-image"
                      id="uploaded-image"
                    />
                  </div>
                  <span className="upload-text">Click to Upload Image</span>
                </label>
                <input
                  type="file"
                  id="bannerImage"
                  name="bannerImage"
                  className="upload-input"
                  accept="image/*"
                  onChange={handleImageUpload}
                />
              </div>
            </div>

            <div className="form-row">
              <label>Permalink</label>
              <div>{categoryData.permalink}</div>
            </div>

            <div className='SubmitBtn'>
              <CustomBtn
                label="Add Category"
                className="AddCatBtn"
                onClick={handleAddCat}
                type="submit"
              />
            </div>

          </div> */}
          <div className="NewCat-Add">
            <form onSubmit={(e) => { e.preventDefault(); handleAddCate(); }}>
              <div className="form-row">
                <label htmlFor="name">Name<span className='superscript'>*</span></label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  placeholder="Enter Category Name..."
                  value={categoryData.name}
                  onChange={handleInputChange}
                  required // Optional: Add if field is mandatory
                />
              </div>

              <div className="form-row">
                <label htmlFor="slug">Slug<span className='superscript'>*</span></label>
                <input
                  type="text"
                  id="slug"
                  name="slug"
                  placeholder="Enter Slug..."
                  value={categoryData.slug}
                  onChange={handleInputChange}
                  required
                />
              </div>

              <div className="form-row">
                <label htmlFor="menuOrder">Menu Order<span className='superscript'>*</span></label>
                <input
                  type="number" // Change to number for validation
                  id="menuOrder"
                  name="menuOrder"
                  placeholder='Enter Menu Order...'
                  value={categoryData.menuOrder}
                  onChange={handleInputChange}
                  required
                />
              </div>

              {/* <div className="form-row">
                <label htmlFor="parentCategory">Parent Category<span className='superscript'>*</span></label>
                <select
                  id="parentCategory"
                  name="parentCategory"
                  value={categoryData.parentCategory}
                  onChange={handleInputChange}
                  required
                >
                  <option value="">Select Parent Category</option>
                  <option value="parent1">Parent Category 1</option>
                  <option value="parent2">Parent Category 2</option>
                </select>
              </div> */}

              <div className="form-row">
                {/* <label htmlFor="parentCategory">
                  Parent Category<span className="superscript">*</span>
                </label>
                <div className="custom-dropdown-wrapper">
                  <select
                    id="parentCategory"
                    name="parentCategory"
                    value={categoryData.parentCategory}
                    onChange={handleInputChange}
                    onClick={toggleDropdown}
                    onBlur={() => setIsOpen(false)} // Close when losing focus
                    required
                  >
                    <option value="">Select Parent Category</option>
                    <option value="parent1">Parent Category 1</option>
                    <option value="parent2">Parent Category 2</option>
                  </select>

                  <img
                    src={isOpen ? arrowUp : arrowDown}
                    alt="Dropdown toggle icon"
                    className="custom-dropdown-icon"
                  />
                </div> */}

<label htmlFor="parentCategory">
                  Parent Category<span className="superscript">*</span>
                </label>
                <div className="custom-dropdown-wrapper">
                                
                  <CustomDropdown
                    options={dropdownOptions}
                    selectedOption={categoryData.parentCategory}
                    handleOptionChange={handleInputChange1}
                  />
                </div>
              </div>

              <div className="form-row">
                <label htmlFor="description">Description</label>
                <textarea
                  id="description"
                  name="description"
                  placeholder='Enter Product Description here...'
                  value={categoryData.description}
                  onChange={handleInputChange}
                />
              </div>

              <div className="form-row">
                <label htmlFor="displayType">Display Type<span className='superscript'>*</span></label>
                {/* <select
                  id="displayType"
                  name="displayType"
                  value={categoryData.displayType}
                  onChange={handleInputChange}
                  required
                >
                  <option value="">Select Display Type</option>
                  <option value="grid">Show</option>
                  <option value="list">Hide</option>
                </select> */}
                <Select
                  options={options}
                  value={options.find(option => option.value === categoryData.parentCategory)}
                  onChange={(option) => handleInputChange({ target: { name: 'parentCategory', value: option.value } })}
                  styles={{
                    control: (base) => ({
                      ...base,
                      borderRadius: '4px',
                      height: '40px',
                      borderColor: '#f0f0f0',
                    }),
                    option: (provided) => ({
                      ...provided,
                      color: '#333',
                      padding: 50,
                    }),
                  }}
                />
              </div>

              <div className="form-row">
                <label htmlFor="bannerImage">Banner Image</label>
                <div className="banner-upload">
                  <label htmlFor="bannerImage" className="upload-label">
                    <div className="upload-button">
                      <img
                        src={uploadIcon}
                        alt=""
                        className="uploaded-image"
                        id="uploaded-image"
                      />
                    </div>
                    <span className="upload-text">Click to Upload Image</span>
                  </label>
                  <input
                    type="file"
                    id="bannerImage"
                    name="bannerImage"
                    className="upload-input"
                    accept="image/*"
                    onChange={handleImageUpload}
                  />
                </div>
                {/* Optional: Display image preview */}
                {imagePreview && <img src={imagePreview} alt="Image Preview" className="image-preview" />}
              </div>

              <div className="form-row">
                <label>Permalink</label>
                <div className='permaDisplay'>{categoryData.permalink}</div>
              </div>

              <div className='SubmitBtn'>
                <CustomBtn
                  label="Add Category"
                  className="AddCatBtn"
                  onClick={handleAddCate}
                  type="button" // Ensure it's still a button to prevent default submission
                />
              </div>
            </form>
          </div>
        </div >
        <div className='Section2-Rightside'>
          <DataTable
            columns={columns}
            data={data.slice((currentPage - 1) * rowsPerPage, currentPage * rowsPerPage)}
            pagination
            paginationComponent={() => (
              <CustomPagination
                rowsPerPage={rowsPerPage}
                rowCount={data.length}
                currentPage={currentPage}
                onChangePage={handlePageChange}
              />
            )}
            customStyles={customStyles}
          />
        </div>
      </div >

    </div >
  );
};

export default ProductsCat;


-----------------------------------------------------------------------------------------------------------------

01-10-2024 (ProductCat Component Code)

import React from 'react';
import axios from 'axios';
import { useState, useEffect } from 'react';
import './ECommerce.css';
import '../Page.css';
import CustomBtn from '../../Components/UI-Controls/Buttons/Btn';
import SearchBar from '../../Components/UI-Controls/SearchBar/Search';
import searchIcon from '../../Assets/Images/Search Bar 20 x 20.png';
import actionIcon from '../../Assets/Images/ActionBtn 30 x 30.png';
import uploadIcon from '../../Assets/Images/UploadImg 24 x 24.png';
import DataTable from 'react-data-table-component';
import CustomPagination from '../../Components/UI-Controls/Pagination/Pagination';
import CustomDropdown from '../../Components/UI-Controls/Dropdown/dropdown';

const ProductsCat = () => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [categoryData, setCategoryData] = useState({
    name: '',
    slug: '',
    parentCategory: '',
    description: '',
    displayType: '',
    menuOrder: '',
    permalink: '',
  });
  const [imagePreview, setImagePreview] = useState(null);
  const rowsPerPage = 10; // Number of rows per page

  useEffect(() => {
    console.log('Fetching data...');
    fetchTableData();
  }, []);

  useEffect(() => {
    // Set static data instead of fetching from API
    // const staticData = [
    //   {
    //     id: 1,
    //     name: 'Leanne Graham',
    //     status: 'Published',
    //     image: '', // Example image URL
    //     address: { zipcode: '12345', city: 'Gwenborough', street: 'Kulas Light' },
    //     username: 'In-Stock',
    //     price: 100.00,
    //     email: 'user1@example.com',
    //   },
    //   {
    //     id: 2,
    //     name: 'Ervin Howell',
    //     status: 'Drafted',
    //     image: '',
    //     address: { zipcode: '12346', city: 'Romaguera', street: 'Victor Plains' },
    //     username: 'Out of Stock',
    //     price: 200.00,
    //     email: 'user2@example.com',
    //   },
    //   {
    //     id: 3,
    //     name: 'Clementine Bauch',
    //     status: 'Published',
    //     image: '',
    //     address: { zipcode: '12347', city: 'Lebsackbury', street: 'Douglas Extension' },
    //     username: 'In-Stock',
    //     price: 300.00,
    //     email: 'user3@example.com',
    //   },
    //   {
    //     id: 4,
    //     name: 'Patricia Lebsack',
    //     status: 'Drafted',
    //     image: '',
    //     address: { zipcode: '12348', city: 'South Elvis', street: 'Hoeger Mall' },
    //     username: 'Back Order',
    //     price: 400.00,
    //     email: 'user4@example.com',
    //   },
    //   {
    //     id: 5,
    //     name: 'Chelsey Dietrich',
    //     status: 'Published',
    //     image: '',
    //     address: { zipcode: '12349', city: 'Roscoeview', street: 'Skiles Walks' },
    //     username: 'In-Stock',
    //     price: 150.00,
    //     email: 'user5@example.com',
    //   },
    //   {
    //     id: 6,
    //     name: 'Mrs. Dennis Schulist',
    //     status: 'Drafted',
    //     image: '',
    //     address: { zipcode: '12350', city: 'Lehman', street: 'Norberto Crossing' },
    //     username: 'Back Order',
    //     price: 250.00,
    //     email: 'user6@example.com',
    //   },
    //   {
    //     id: 7,
    //     name: 'Kurtis Weissnat',
    //     status: 'Published',
    //     image: '',
    //     address: { zipcode: '12351', city: 'Howemouth', street: 'Rex Trail' },
    //     username: 'In-Stock',
    //     price: 350.00,
    //     email: 'user7@example.com',
    //   },
    //   {
    //     id: 8,
    //     name: 'Nicholas Runolfsdottir V',
    //     status: 'Drafted',
    //     image: '',
    //     address: { zipcode: '12352', city: 'Aliyaview', street: 'Ellsworth Summit' },
    //     username: 'Back Order',
    //     price: 450.00,
    //     email: 'user8@example.com',
    //   },
    //   {
    //     id: 9,
    //     name: 'Glenna Reichert',
    //     status: 'Published',
    //     image: '',
    //     address: { zipcode: '12353', city: 'Bartholomebury', street: 'Dayna Park' },
    //     username: 'In-Stock',
    //     price: 550.00,
    //     email: 'user9@example.com',
    //   },
    //   {
    //     id: 10,
    //     name: 'Clementina DuBuque',
    //     status: 'Drafted',
    //     image: '',
    //     address: { zipcode: '12354', city: 'Lebsackbury', street: 'Kovacek Fields' },
    //     username: 'Back Order',
    //     price: 650.00,
    //     email: 'user10@example.com',
    //   },
    // ];

    // setData(staticData); // Use static data directly
  }, []);

  async function fetchTableData() {
    setLoading(true);
    // The API call can be removed or kept for other user data if needed.
    const URL = 'http://fm.skyhub.pk/api/v1/productCategory/get';
    const response = await fetch(URL);
    const users = await response.json();
    setLoading(false);
    setData(users.categories);
    console.log(users.categories);
  }

  const handleSearch = () => console.log('Search has been triggered');
  const handleAddCat = () => console.log('Category add button has been clicked');

  const handlePageChange = (page) => {
    setCurrentPage(page);
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setCategoryData({ ...categoryData, [name]: value });

    if (name === 'slug') {
      // Auto-generate permalink when slug is updated
      setCategoryData({
        ...categoryData,
        slug: value,
        permalink: `https://localhost:5173/category/${value}`,
      });
    }
  };

  const handleImageUpload = (event) => {
    const file = event.target.files[0];
    const reader = new FileReader();
    reader.onload = () => {
      setImagePreview(reader.result);
    };
    if (file) {
      reader.readAsDataURL(file);
    }
  };

  // const handleAddCate = async () => {
  //   // Create a FormData object
  //   const formData = new FormData();

  //   // Append form data
  //   formData.append('name', categoryData.name);
  //   formData.append('slug', categoryData.slug);
  //   formData.append('parentCategory', categoryData.parentCategory);
  //   formData.append('description', categoryData.description);
  //   formData.append('display', categoryData.displayType);
  //   formData.append('menu_order', categoryData.menuOrder);

  //   // Append permalink to the FormData
  //   formData.append('permalink', categoryData.permalink);

  //   // Append image file if exists
  //   const bannerImageInput = document.getElementById('bannerImage');
  //   if (bannerImageInput.files[0]) {
  //     formData.append('bannerImage', bannerImageInput.files[0]);
  //   }

  //   try {
  //     setLoading(true); // Start loading state
  //     console.log('Form submission started with data:', categoryData);

  //     const response = await axios.post('http://fm.skyhub.pk/api/v1/productCategory/add', formData, {
  //       headers: {
  //         'Content-Type': 'multipart/form-data',
  //       },
  //     });

  //     // Handle successful response
  //     console.log('Form submission successful:', response.data);

  //     // Optionally reset the form or update the UI here
  //     setCategoryData({
  //       name: '',
  //       slug: '',
  //       parentCategory: '',
  //       description: '',
  //       displayType: '',
  //       menuOrder: '',
  //       permalink: '', // Reset permalink as well
  //     });
  //     setImagePreview(null); // Reset image preview
  //   } catch (error) {
  //     // Detailed error handling
  //     if (error.response) {
  //       // Server responded with a status other than 2xx
  //       console.error('Error submitting form:', {
  //         status: error.response.status,
  //         data: error.response.data,
  //         headers: error.response.headers,
  //       });
  //       alert(`Error: ${error.response.data.message || 'An error occurred. Please try again.'}`);
  //     } else if (error.request) {
  //       // Request was made but no response was received
  //       console.error('Error: No response received:', error.request);
  //       alert('Error: No response from server. Please check your connection and try again.');
  //     } else {
  //       // Something else caused the error
  //       console.error('Error:', error.message);
  //       alert('Error: ' + error.message);
  //     }

  //     // Optionally reset the form state or handle the error state here
  //     // setCategoryData({...}); // Reset if necessary
  //   } finally {
  //     setLoading(false); // End loading state
  //     console.log('Form submission ended.');
  //   }
  // };

  const handleAddCate = async () => {
    // Create a FormData object
    const formData = new FormData();

    // Append form data
    formData.append('name', categoryData.name);
    formData.append('slug', categoryData.slug);
    formData.append('parent', categoryData.parentCategory);
    formData.append('description', categoryData.description);

    // Conditionally set displayType based on the value of categoryData.displayType
    const displayValue = categoryData.displayType === "show" ? "1" : "0";
    formData.append('display', displayValue);

    formData.append('meun_order', categoryData.menuOrder);
    formData.append('permalink', categoryData.permalink);

    // Append image file if exists
    const bannerImageInput = document.getElementById('bannerImage');
    if (bannerImageInput.files[0]) {
      formData.append('bannerImage', bannerImageInput.files[0]);
    }

    try {
      setLoading(true); // Start loading state
      console.log('Form submission started with data:', categoryData);

      const response = await axios.post('http://fm.skyhub.pk/api/v1/productCategory/add', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      // Handle successful response
      console.log('Form submission successful:', response.data);

      // Optionally reset the form or update the UI here
      setCategoryData({
        name: '',
        slug: '',
        parentCategory: '',
        description: '',
        displayType: '',
        menuOrder: '',
        permalink: '', // Reset permalink as well
      });
      setImagePreview(null); // Reset image preview
    } catch (error) {
      // Detailed error handling
      if (error.response) {
        // Server responded with a status other than 2xx
        console.error('Error submitting form:', {
          status: error.response.status,
          data: error.response.data,
          headers: error.response.headers,
        });
        alert(`Error: ${error.response.data.message || 'An error occurred. Please try again.'}`);
      } else if (error.request) {
        // Request was made but no response was received
        console.error('Error: No response received:', error.request);
        alert('Error: No response from server. Please check your connection and try again.');
      } else {
        // Something else caused the error
        console.error('Error:', error.message);
        alert('Error: ' + error.message);
      }

      // Optionally reset the form state or handle the error state here
    } finally {
      setLoading(false); // End loading state
      console.log('Form submission ended.');
    }
  };

  const customStyles = {
    headCells: {
      style: {
        height: '52px',
        borderRadius: '5px 5px 5px 5px',
        background: '#FDFDFD',
        opacity: '1',
        textAlign: 'center',
        justifyContent: 'center',
        border: 'none',
        color: 'var(--text-color)',
        fontFamily: 'poppins',
        fontWeight: '500',
        fontSize: '14px',
        overflow: 'wrap', // Prevents content overflow in headers
        textOverflow: 'ellipsis',
        whiteSpace: 'normal', // Allows wrapping in header cells
      },
    },
    cells: {
      style: {
        height: '66px',
        justifyContent: 'center',
        textAlign: 'center',
        background: '#FFFFFF',
        borderTop: '1px solid #F0F0F0',
        borderRight: 'none',
        color: '#858585',
        fontFamily: 'poppins',
        fontWeight: '400',
        fontSize: '12px',
        whiteSpace: 'normal', // Allows text to wrap in cells
        wordBreak: 'break-word', // Breaks long words if necessary
        overflow: 'wrap', // Prevents content overflow
        textOverflow: 'ellipsis', // Shows ellipsis for long content
      },
    },
  };

  // const columns = [
  //   {
  //     name: (
  //       <input
  //         type="checkbox"
  //         style={{ margin: 0 }}
  //         onChange={(e) => console.log('All selected:', e.target.checked)}
  //       />
  //     ),
  //     cell: (row) => (
  //       <input
  //         type="checkbox"
  //         style={{ margin: 0 }}
  //         onChange={(e) => console.log('Selected:', row, e.target.checked)}
  //       />
  //     ),
  //     ignoreRowClick: true,
  //     allowOverflow: true,
  //     button: true,
  //     width: '50px', // Assign a width for this checkbox column
  //   },
  //   {
  //     name: 'Image',
  //     selector: (row) => row.image,
  //     width: '100px', // Assign custom width
  //   },
  //   {
  //     name: 'Name',
  //     selector: (row) => row.name,
  //     width: '120px', // Assign custom width
  //   },
  //   {
  //     name: 'Parent Category',
  //     selector: (row) => row.parent_name,
  //     width: '150px', // Assign custom width
  //   },
  //   {
  //     name: 'Slug',
  //     selector: (row) => row.slug,
  //     width: '100px', // Assign custom width
  //   },
  //   {
  //     name: 'Count',
  //     selector: (row) => row.uid, // Assuming you want the price
  //     width: '80px', // Assign custom width
  //   },
  //   {
  //     name: 'Action',
  //     cell: (row) => (
  //       <img
  //         src={actionIcon}
  //         alt="Action Icon"
  //         width="30"
  //         height="30"
  //         style={{ cursor: 'pointer' }}
  //         onClick={() => console.log('Action clicked for:', row)}
  //       />
  //     ),
  //     width: '120px', // Assign custom width for action column
  //   },
  // ];

  const columns = [
    {
      name: (
        <input
          type="checkbox"
          style={{ margin: 0 }}
          onChange={(e) => console.log('All selected:', e.target.checked)}
        />
      ),
      cell: (row) => (
        <input
          type="checkbox"
          style={{ margin: 0 }}
          onChange={(e) => console.log('Selected:', row, e.target.checked)}
        />
      ),
      ignoreRowClick: true,
      allowOverflow: true,
      button: true,
      width: '50px',
    },
    {
      name: 'Image',
      cell: (row) => (
        <img
          src={row.image}
          // alt={row.name}
          width="40"
          height="40"
          style={{ objectFit: 'cover' }}
        />
      ),
      width: '100px',
    },
    {
      name: 'Name',
      selector: (row) => row.name,
      width: '120px',
    },
    // {
    //   name: 'Parent Category',
    //   selector: (row) => row.parent_name,
    //   width: '150px',
    // },
    {
      name: 'Description',
      selector: (row) => row.description,
      width: '150px',
    },
    {
      name: 'Slug',
      selector: (row) => row.slug,
      width: '100px',
    },
    {
      name: 'Count',
      selector: (row) => row.uid,
      width: '80px',
    },
    {
      name: 'Action',
      cell: (row) => (
        <img
          src={actionIcon}
          alt="Action Icon"
          width="30"
          height="30"
          style={{ cursor: 'pointer' }}
          onClick={() => console.log('Action clicked for:', row)}
        />
      ),
      width: '120px',
    },
  ];


  // Options for the Parent Category Dropdown
  const parentCatOptions = [
    { value: '1', label: '1' },
    { value: '2', label: '2' },
    { value: '3', label: '3' },
  ];

  // Options for the Display Type Dropdown
  const displayTypeOptions = [
    { value: 'Show', label: 'Show' },
    { value: 'Hide', label: 'Hide' },
  ];

  // Handler for dropdown change
  const handleParentCat = (selectedValue) => {
    setCategoryData((prevState) => ({
      ...prevState,
      parentCategory: selectedValue,  // Update the state with selected value
    }));
  };

  // Handler for dropdown change
  const handleDisplayType = (selectedValue) => {
    setCategoryData((prevState) => ({
      ...prevState,
      displayType: selectedValue,  // Update the state with selected value
    }));
  };


  return (
    <div className="ProductCatPage">
      <div className="CatSection-01">
        <span className='Section1-Leftside'>
          Categories
        </span>
        <div className='Section1-Rightside'>
          <SearchBar onSearch={handleSearch} icon={searchIcon} placeholder="Search category by name" />
        </div>
      </div>

      <div className="CatSection-02">
        <div className='Section2-Leftside'>
          <div className='Header'>Add New Category</div>
          <div className="NewCat-Add">
            <form onSubmit={(e) => { e.preventDefault(); handleAddCate(); }}>
              <div className="form-row">
                <label htmlFor="name">Name<span className='superscript'>*</span></label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  placeholder="Enter Category Name..."
                  value={categoryData.name}
                  onChange={handleInputChange}
                  required // Optional: Add if field is mandatory
                />
              </div>

              <div className="form-row">
                <label htmlFor="slug">Slug<span className='superscript'>*</span></label>
                <input
                  type="text"
                  id="slug"
                  name="slug"
                  placeholder="Enter Slug..."
                  value={categoryData.slug}
                  onChange={handleInputChange}
                  required
                />
              </div>

              <div className="form-row">
                <label htmlFor="menuOrder">Menu Order<span className='superscript'>*</span></label>
                <input
                  type="number" // Change to number for validation
                  id="menuOrder"
                  name="menuOrder"
                  placeholder='Enter Menu Order...'
                  value={categoryData.menuOrder}
                  onChange={handleInputChange}
                  required
                />
              </div>

              <div className="form-row">
                <label htmlFor="parentCategory">
                  Parent Category<span className="superscript">*</span>
                </label>
                <div className="custom-dropdown-wrapper">
                  <CustomDropdown
                    options={parentCatOptions}
                    selectedOption={categoryData.parentCategory}
                    handleOptionChange={handleParentCat}
                  />
                </div>
              </div>

              <div className="form-row">
                <label htmlFor="description">Description</label>
                <textarea
                  id="description"
                  name="description"
                  placeholder='Enter Product Description here...'
                  value={categoryData.description}
                  onChange={handleInputChange}
                />
              </div>

              <div className="form-row">
                <label htmlFor="displayType">Display Type<span className='superscript'>*</span></label>
                <div className="custom-dropdown-wrapper">
                  <CustomDropdown
                    options={displayTypeOptions}
                    selectedOption={categoryData.displayType}
                    handleOptionChange={handleDisplayType}
                  />
                </div>
              </div>

              <div className="form-row">
                <label htmlFor="bannerImage">Banner Image</label>
                <div className="banner-upload">
                  <label htmlFor="bannerImage" className="upload-label">
                    <div className="upload-button">
                      <img
                        src={uploadIcon}
                        alt=""
                        className="uploaded-image"
                        id="uploaded-image"
                      />
                    </div>
                    <span className="upload-text">Click to Upload Image</span>
                  </label>
                  <input
                    type="file"
                    id="bannerImage"
                    name="bannerImage"
                    className="upload-input"
                    accept="image/*"
                    onChange={handleImageUpload}
                  />
                </div>
                {/* Optional: Display image preview */}
                {imagePreview && <img src={imagePreview} alt="Image Preview" className="image-preview" />}
              </div>

              <div className="form-row">
                <label>Permalink</label>
                <div className='permaDisplay'>{categoryData.permalink}</div>
              </div>

              <div className='SubmitBtn'>
                <CustomBtn
                  label="Add Category"
                  className="AddCatBtn"
                  onClick={handleAddCate}
                  type="button" // Ensure it's still a button to prevent default submission
                />
              </div>
            </form>
          </div>
        </div >
        <div className='Section2-Rightside'>
          <DataTable
            columns={columns}
            data={Array.isArray(data) ? data.slice((currentPage - 1) * rowsPerPage, currentPage * rowsPerPage) : []}
            pagination
            paginationComponent={() => (
              <CustomPagination
                rowsPerPage={rowsPerPage}
                rowCount={Array.isArray(data) ? data.length : 0}
                currentPage={currentPage}
                onChangePage={handlePageChange}
              />
            )}
            customStyles={customStyles}
          />
        </div>
      </div >

    </div >
  );
};

export default ProductsCat;

---------------------------------------------------------------------------------------------------------------

02-10-2024 11:26am

import React from 'react';
import axios from 'axios';
import { useState, useEffect } from 'react';
import './ECommerce.css';
import '../Page.css';
import CustomBtn from '../../Components/UI-Controls/Buttons/Btn';
import SearchBar from '../../Components/UI-Controls/SearchBar/Search';
import searchIcon from '../../Assets/Images/Search Bar 20 x 20.png';
import uploadIcon from '../../Assets/Images/UploadImg 24 x 24.png';
import DataTable from 'react-data-table-component';
import CustomPagination from '../../Components/UI-Controls/Pagination/Pagination';
import CustomDropdown from '../../Components/UI-Controls/Dropdown/dropdown';
import { AiOutlineEllipsis } from "react-icons/ai";
import { AiOutlineMore } from "react-icons/ai";
import defaultImage from "../../Assets/Images/defaultBannerImage 128 x 128.png";

const ProductsCat = () => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [categoryData, setCategoryData] = useState({
    name: '',
    slug: '',
    parentCategory: '0',
    description: '',
    displayType: '',
    menuOrder: '',
    permalink: '',
  });
  const [imagePreview, setImagePreview] = useState(null);
  const [thumbnailimage, setThumbnailImage] = useState(null);
  const [activeRowId, setActiveRowId] = useState(null);
  const [selectedRows, setSelectedRows] = useState([]);
  const [parentCatOpt, setParentCatOpt] = useState([]);
  const rowsPerPage = 5;

  useEffect(() => {
    console.log('Fetching data...');
    fetchTableData();
  }, []);

  // async function fetchTableData() {
  //   setLoading(true);
  //   const URL = 'https://fm.skyhub.pk/api/v1/productCategory/get';

  //   try {
  //     const response = await fetch(URL);
  //     const users = await response.json();
  //     setLoading(false);

  //     const reversedCategories = users.categories.reverse();

  //     setData(reversedCategories);
  //     console.log(reversedCategories);
  //   } catch (error) {
  //     setLoading(false);
  //     console.error('Error fetching data:', error);
  //   }
  // }

  async function fetchTableData() {
    setLoading(true);
    const URL = 'https://fm.skyhub.pk/api/v1/productCategory/get';
  
    try {
      const response = await fetch(URL);
      const users = await response.json();
      setLoading(false);
  
      // Reverse the categories and filter out categories with null or empty parent_name
      const reversedCategories = users.categories.reverse();
      const validParentCategories = reversedCategories
        .filter(cat => cat.name && cat.name.trim() !== '');
  
      // Map the filtered categories to an array of options
      const parentCatOptions = [
        { value: '', label: 'Select a parent category' }, // Empty option
        ...validParentCategories.map(cat => ({
          value: cat.uid,
          label: cat.name,
        })),
      ];
  
      // Set the options for the dropdown
      setParentCatOpt(parentCatOptions);
      setData(reversedCategories);  // In case you need the full dataset for other uses
      console.log(parentCatOptions);
    } catch (error) {
      setLoading(false);
      console.error('Error fetching data:', error);
    }
  }  

  const handleSearch = () => console.log('Search has been triggered');

  const handlePageChange = (page) => {
    setCurrentPage(page);
  };

  const handleSelectAll = (isSelected) => {
    if (isSelected) {
      const allRowIds = data.map(row => row.uid);
      setSelectedRows(allRowIds);
    } else {
      setSelectedRows([]);
    }
  };

  const handleRowSelect = (rowId) => {
    setSelectedRows(prevSelected => {
      if (prevSelected.includes(rowId)) {
        return prevSelected.filter(id => id !== rowId);
      } else {
        return [...prevSelected, rowId];
      }
    });
  };

  // const handleInputChange = (e) => {
  //   const { name, value } = e.target;
  //   setCategoryData({ ...categoryData, [name]: value });

  //   if (name === 'slug') {
  //     // Auto-generate permalink when slug is updated
  //     setCategoryData({
  //       ...categoryData,
  //       slug: value,
  //       permalink: `/category/${value}`,
  //     });
  //   }
  // };

  const handleInputChange = (e) => {
    const { name, value } = e.target;

    if (name === 'name') {
      // Generate the slug and permalink from the name field input
      const generatedSlug = value
        .toLowerCase()
        .replace(/\s+/g, '-')        // Replace spaces with hyphens
        .replace(/[^a-z0-9\-]/g, ''); // Remove any non-alphanumeric characters except hyphens

      setCategoryData((prevState) => ({
        ...prevState,
        [name]: value,                          // Update name field
        slug: prevState.slug || generatedSlug,  // Only auto-generate slug if it's empty
        permalink: `/category/${prevState.slug || generatedSlug}`, // Update permalink based on the slug
      }));
    } else if (name === 'slug') {
      // Allow user to update the slug manually, and update the permalink accordingly
      const formattedSlug = value
        .toLowerCase()
        .replace(/\s+/g, '-')        // Replace spaces with hyphens
        .replace(/[^a-z0-9\-]/g, ''); // Remove any non-alphanumeric characters except hyphens

      setCategoryData({
        ...categoryData,
        [name]: formattedSlug,
        permalink: `/category/${formattedSlug}`, // Update permalink based on manually entered slug
      });
    } else {
      // Handle other fields as normal
      setCategoryData({ ...categoryData, [name]: value });
    }
  };

  const handleImageUpload = (event) => {
    const file = event.target.files[0];
    const reader = new FileReader();
    reader.onload = () => {
      setImagePreview(reader.result);
    };
    if (file) {
      reader.readAsDataURL(file);
    }
  };

  const handlethumbnailImageUpload = (event) => {
    const file = event.target.files[0];
    const reader = new FileReader();
    reader.onload = () => {
      setThumbnailImage(reader.result);
    };
    if (file) {
      reader.readAsDataURL(file);
    }
  };

  // const handleAddCate = async () => {
  //   // Create a FormData object
  //   const formData = new FormData();

  //   // Append form data
  //   formData.append('name', categoryData.name);
  //   formData.append('slug', categoryData.slug);
  //   formData.append('parent', categoryData.parentCategory);
  //   formData.append('description', categoryData.description);

  //   // Conditionally set displayType based on the value of categoryData.displayType
  //   const displayValue = categoryData.displayType === "show" ? "1" : "0";
  //   formData.append('display', displayValue);

  //   formData.append('meun_order', categoryData.menuOrder);
  //   formData.append('permalink', categoryData.permalink);

  //   // Append thumbnail image file if exists
  //   const thumbnailImageInput = document.getElementById('thumbnailImage');
  //   if (thumbnailImageInput.files[0]) {
  //     formData.append('image', thumbnailImageInput.files[0]);
  //   }

  //   // Append banner image file if exists
  //   const bannerImageInput = document.getElementById('bannerImage');
  //   if (bannerImageInput.files[0]) {
  //     formData.append('bannerImage', bannerImageInput.files[0]);
  //   }

  //   try {
  //     setLoading(true); // Start loading state
  //     console.log('Form submission started with data:', categoryData);

  //     const response = await axios.post('https://fm.skyhub.pk/api/v1/productCategory/add', formData, {
  //       headers: {
  //         'Content-Type': 'multipart/form-data',
  //       },
  //     });

  //     // Handle successful response
  //     console.log('Form submission successful:', response.data);

  //     // Optionally reset the form or update the UI here
  //     setCategoryData({
  //       name: '',
  //       slug: '',
  //       parentCategory: '',
  //       description: '',
  //       displayType: '',
  //       menuOrder: '',
  //       permalink: '', // Reset permalink as well
  //     });
  //     setImagePreview(null); // Reset banner-image preview
  //     setThumbnailImage(null); // Reset thumbnail-image preview
  //   } catch (error) {
  //     // Detailed error handling
  //     if (error.response) {
  //       // Server responded with a status other than 2xx
  //       console.error('Error submitting form:', {
  //         status: error.response.status,
  //         data: error.response.data,
  //         headers: error.response.headers,
  //       });
  //       alert(`Error: ${error.response.data.message || 'An error occurred. Please try again.'}`);
  //     } else if (error.request) {
  //       // Request was made but no response was received
  //       console.error('Error: No response received:', error.request);
  //       alert('Error: No response from server. Please check your connection and try again.');
  //     } else {
  //       // Something else caused the error
  //       console.error('Error:', error.message);
  //       alert('Error: ' + error.message);
  //     }

  //     // Optionally reset the form state or handle the error state here
  //   } finally {
  //     setLoading(false); // End loading state
  //     console.log('Form submission ended.');
  //   }
  // };

  // const handleAddCate = async () => {
  //   // Use the slug from state, or generate a new one if the slug is empty
  //   let slugValue = categoryData.slug || categoryData.name
  //     .toLowerCase()
  //     .replace(/\s+/g, '-')        // Replace spaces with hyphens
  //     .replace(/[^a-z0-9\-]/g, ''); // Remove any non-alphanumeric characters except hyphens

  //   let permalinkValue = `/category/${slugValue}`;

  //   // Create a FormData object
  //   const formData = new FormData();

  //   // Append form data
  //   formData.append('name', categoryData.name);
  //   formData.append('slug', slugValue);  // Use the slug from state or the auto-generated slug
  //   formData.append('parent', categoryData.parentCategory);
  //   formData.append('description', categoryData.description);

  //   // Conditionally set displayType based on the value of categoryData.displayType
  //   const displayValue = categoryData.displayType === "show" ? "1" : "0";
  //   formData.append('display', displayValue);

  //   formData.append('meun_order', categoryData.menuOrder);
  //   formData.append('permalink', permalinkValue);  // Use the updated permalink

  //   // Append thumbnail image file if exists
  //   const thumbnailImageInput = document.getElementById('thumbnailImage');
  //   if (thumbnailImageInput.files[0]) {
  //     formData.append('image', thumbnailImageInput.files[0]);
  //   }

  //   // Append banner image file if exists
  //   const bannerImageInput = document.getElementById('bannerImage');
  //   if (bannerImageInput.files[0]) {
  //     formData.append('bannerImage', bannerImageInput.files[0]);
  //   }

  //   try {
  //     setLoading(true); // Start loading state
  //     console.log('Form submission started with data:', categoryData);

  //     const response = await axios.post('https://fm.skyhub.pk/api/v1/productCategory/add', formData, {
  //       headers: {
  //         'Content-Type': 'multipart/form-data',
  //       },
  //     });

  //     // Handle successful response
  //     console.log('Form submission successful:', response.data);

  //     // Optionally reset the form or update the UI here
  //     setCategoryData({
  //       name: '',
  //       slug: '',
  //       parentCategory: '',
  //       description: '',
  //       displayType: '',
  //       menuOrder: '',
  //       permalink: '', // Reset permalink as well
  //     });
  //     setImagePreview(null); // Reset banner-image preview
  //     setThumbnailImage(null); // Reset thumbnail-image preview
  //   } catch (error) {
  //     // Detailed error handling
  //     if (error.response) {
  //       console.error('Error submitting form:', {
  //         status: error.response.status,
  //         data: error.response.data,
  //         headers: error.response.headers,
  //       });
  //       alert(`Error: ${error.response.data.message || 'An error occurred. Please try again.'}`);
  //     } else if (error.request) {
  //       console.error('Error: No response received:', error.request);
  //       alert('Error: No response from server. Please check your connection and try again.');
  //     } else {
  //       console.error('Error:', error.message);
  //       alert('Error: ' + error.message);
  //     }
  //   } finally {
  //     setLoading(false); // End loading state
  //     console.log('Form submission ended.');
  //   }
  // };

  const handleAddCate = async () => {
    // Use the slug from state, or generate a new one if the slug is empty
    let slugValue = categoryData.slug || categoryData.name
      .toLowerCase()
      .replace(/\s+/g, '-')        // Replace spaces with hyphens
      .replace(/[^a-z0-9\-]/g, ''); // Remove any non-alphanumeric characters except hyphens

    let permalinkValue = `/category/${slugValue}`;

    // Create a FormData object
    const formData = new FormData();

    // Append form data
    formData.append('name', categoryData.name);
    formData.append('slug', slugValue);  // Use the slug from state or the auto-generated slug

    // If parentCategory is empty, set it to '0'
    const parentCategoryValue = categoryData.parentCategory || '0';
    formData.append('parent', parentCategoryValue);

    formData.append('description', categoryData.description);

    // Conditionally set displayType based on the value of categoryData.displayType
    const displayValue = categoryData.displayType === "show" ? "1" : "0";
    formData.append('display', displayValue);

    formData.append('meun_order', categoryData.menuOrder);
    formData.append('permalink', permalinkValue);  // Use the updated permalink

    // Append thumbnail image file if exists
    const thumbnailImageInput = document.getElementById('thumbnailImage');
    if (thumbnailImageInput.files[0]) {
      formData.append('image', thumbnailImageInput.files[0]);
    }

    // Append banner image file if exists
    const bannerImageInput = document.getElementById('bannerImage');
    if (bannerImageInput.files[0]) {
      formData.append('bannerImage', bannerImageInput.files[0]);
    }

    try {
      setLoading(true); // Start loading state
      console.log('Form submission started with data:', categoryData);

      const response = await axios.post('https://fm.skyhub.pk/api/v1/productCategory/add', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      // Handle successful response
      console.log('Form submission successful:', response.data);

      // Optionally reset the form or update the UI here
      setCategoryData({
        name: '',
        slug: '',
        parentCategory: '',
        description: '',
        displayType: '',
        menuOrder: '',
        permalink: '', // Reset permalink as well
      });
      setImagePreview(null); // Reset banner-image preview
      setThumbnailImage(null); // Reset thumbnail-image preview
    } catch (error) {
      // Detailed error handling
      if (error.response) {
        console.error('Error submitting form:', {
          status: error.response.status,
          data: error.response.data,
          headers: error.response.headers,
        });
        alert(`Error: ${error.response.data.message || 'An error occurred. Please try again.'}`);
      } else if (error.request) {
        console.error('Error: No response received:', error.request);
        alert('Error: No response from server. Please check your connection and try again.');
      } else {
        console.error('Error:', error.message);
        alert('Error: ' + error.message);
      }
    } finally {
      setLoading(false); // End loading state
      console.log('Form submission ended.');
    }
  };

  const customStyles = {
    headCells: {
      style: {
        height: '52px',
        borderRadius: '5px 5px 5px 5px',
        background: '#FDFDFD',
        opacity: '1',
        textAlign: 'center',
        justifyContent: 'center',
        border: 'none',
        color: 'var(--text-color)',
        fontFamily: 'poppins',
        fontWeight: '500',
        fontSize: '14px',
        overflow: 'wrap', // Prevents content overflow in headers
        textOverflow: 'ellipsis',
        whiteSpace: 'normal', // Allows wrapping in header cells
      },
    },
    cells: {
      style: {
        height: '66px',
        justifyContent: 'center',
        textAlign: 'center',
        background: '#FFFFFF',
        borderTop: '1px solid #F0F0F0',
        borderRight: 'none',
        color: '#858585',
        fontFamily: 'poppins',
        fontWeight: '400',
        fontSize: '12px',
        whiteSpace: 'normal', // Allows text to wrap in cells
        wordBreak: 'break-word', // Breaks long words if necessary
        overflow: 'wrap', // Prevents content overflow
        textOverflow: 'ellipsis', // Shows ellipsis for long content
      },
    },
  };

  const columns = [
    {
      name: (
        <input
          type="checkbox"
          style={{ margin: 0 }}
          onChange={(e) => handleSelectAll(e.target.checked)}
          checked={selectedRows.length === data.length && data.length > 0}
        />
      ),
      cell: (row) => (
        <input
          type="checkbox"
          style={{ margin: 0 }}
          onChange={() => handleRowSelect(row.uid)}
          checked={selectedRows.includes(row.uid)}
        />
      ),
      ignoreRowClick: true,
      allowOverflow: true,
      button: true,
      width: '50px',
    },
    {
      name: 'Image',
      cell: (row) => (
        <img
          src={row.image ? `http://fm.skyhub.pk${row.image}` : defaultImage}
          alt={row.name}
          width="auto"
          height="40px"
          style={{ objectFit: 'cover' }}
        />
      ),
      width: '100px',
    },
    {
      name: 'Name',
      selector: (row) => row.name,
      width: '120px',
    },
    {
      name: 'Description',
      selector: (row) => row.description,
      width: '150px',
    },
    {
      name: 'Slug',
      selector: (row) => row.slug,
      width: '100px',
    },
    {
      name: 'Count',
      selector: (row) => row.uid,
      width: '80px',
    },
    {
      name: 'Action',
      cell: (row) => {
        const isActive = activeRowId === row.uid; // Check if this row is the active one
        console.log(row.uid); // Log the uid for debugging

        return (
          <div style={{ position: 'relative' }}>
            <button
              style={{
                width: '25px',
                height: '25px',
                border: 'none',
                backgroundColor: 'transparent',
                cursor: 'pointer',
                boxShadow: 'rgba(0, 0, 0, 0.16) 0px 1px 4px',
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
                padding: 0,
              }}
              onClick={() => {
                // Toggle the dropdown
                if (isActive) {
                  setActiveRowId(null); // Close the dropdown
                } else {
                  setActiveRowId(row.uid); // Open the clicked dropdown using uid
                }
              }}
            >
              {isActive ? <AiOutlineMore /> : <AiOutlineEllipsis />} {/* Toggle icons */}
            </button>
            {isActive && ( // Render the dropdown only if active
              <div
                className="dropdown"
                style={{
                  position: 'absolute',
                  top: '20%', // Align dropdown vertically centered
                  left: '-400%', // Position it to the left of the button (adjust based on width)
                  transform: 'translateY(-5%)', // Center vertically relative to the button
                  backgroundColor: 'white',
                  // border: '1px solid #ccc',
                  border: 'none',
                  zIndex: 1,
                  width: '100px',
                  borderRadius: '4px 0 0 4px',
                  boxShadow: 'rgba(0, 0, 0, 0.16) 0px 1px 4px',
                }}
              >
                <ul style={{ listStyleType: 'none', padding: '5px', margin: '10px' }}>
                  <li
                    style={{ padding: '5px', cursor: 'pointer' }}
                    onClick={() => console.log('Edit clicked for:', row)}
                  >
                    Edit
                  </li>
                  <li
                    style={{ padding: '5px', cursor: 'pointer' }}
                    onClick={() => console.log('Delete clicked for:', row)}
                  >
                    Delete
                  </li>
                  <li
                    style={{ padding: '5px', cursor: 'pointer' }}
                    onClick={() => console.log('View clicked for:', row)}
                  >
                    View
                  </li>
                </ul>
              </div>
            )}
          </div>
        );
      },
      width: '85px',
    },
  ];

  // Options for the Parent Category Dropdown
  // const parentCatOptions = [
  //   { value: '1', label: '1' },
  //   { value: '2', label: '2' },
  //   { value: '3', label: '3' },
  // ];

  // Options for the Display Type Dropdown
  const displayTypeOptions = [
    { value: 'Show', label: 'Show' },
    { value: 'Hide', label: 'Hide' },
  ];

  // Handler for dropdown change
  const handleParentCat = (selectedValue) => {
    setCategoryData((prevState) => ({
      ...prevState,
      parentCategory: selectedValue,  // Update the state with selected value
    }));
  };

  // Handler for dropdown change
  const handleDisplayType = (selectedValue) => {
    setCategoryData((prevState) => ({
      ...prevState,
      displayType: selectedValue,  // Update the state with selected value
    }));
  };

  return (
    <div className="ProductCatPage">
      <div className="CatSection-01">
        <span className='Section1-Leftside'>
          Categories
        </span>
        <div className='Section1-Rightside'>
          <SearchBar onSearch={handleSearch} icon={searchIcon} placeholder="Search category by name" />
        </div>
      </div>

      <div className="CatSection-02">
        <div className='Section2-Leftside'>
          <div className='Header'>Add New Category</div>
          <div className="NewCat-Add">
            <form onSubmit={(e) => { e.preventDefault(); handleAddCate(); }}>
              <div className="form-row">
                <label htmlFor="name">Name<span className='superscript'>*</span></label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  placeholder="Enter Category Name..."
                  value={categoryData.name}
                  onChange={handleInputChange}
                  required // Optional: Add if field is mandatory
                />
              </div>

              <div className="form-row">
                <label htmlFor="slug">Slug<span className='superscript'>*</span></label>
                <input
                  type="text"
                  id="slug"
                  name="slug"
                  placeholder="Enter Slug..."
                  value={categoryData.slug}
                  onChange={handleInputChange}
                  required
                />
              </div>

              <div className="form-row">
                <label htmlFor="menuOrder">Menu Order<span className='superscript'>*</span></label>
                <input
                  type="number" // Change to number for validation
                  id="menuOrder"
                  name="menuOrder"
                  placeholder='Enter Menu Order...'
                  value={categoryData.menuOrder}
                  onChange={handleInputChange}
                  required
                />
              </div>

              {/* <div className="form-row">
                <label htmlFor="parentCategory">
                  Parent Category<span className="superscript">*</span>
                </label>
                <div className="custom-dropdown-wrapper">
                  <CustomDropdown
                    options={parentCatOptions}
                    selectedOption={categoryData.parentCategory}
                    handleOptionChange={handleParentCat}
                  />
                </div>
              </div> */}

              <div className="form-row">
                <label htmlFor="parentCategory">
                  Parent Category<span className="superscript">*</span>
                </label>
                <div className="custom-dropdown-wrapper">
                  <CustomDropdown
                    options={parentCatOpt}  // Passing the filtered categories as options
                    selectedOption={categoryData.parentCategory || ''}  // Use '' as default for selected option
                    handleOptionChange={handleParentCat}
                  />
                </div>
              </div>

              <div className="form-row">
                <label htmlFor="description">Description</label>
                <textarea
                  id="description"
                  name="description"
                  placeholder='Enter Product Description here...'
                  value={categoryData.description}
                  onChange={handleInputChange}
                />
              </div>

              <div className="form-row">
                <label htmlFor="displayType">Display Type<span className='superscript'>*</span></label>
                <div className="custom-dropdown-wrapper">
                  <CustomDropdown
                    options={displayTypeOptions}
                    selectedOption={categoryData.displayType}
                    handleOptionChange={handleDisplayType}
                  />
                </div>
              </div>

              <div className="form-row">
                <label htmlFor="thumbnailImage">Thumbnail Image</label>
                <div className="banner-upload">
                  <label htmlFor="thumbnailImage" className="upload-label">
                    <div className="upload-button">
                      <img
                        src={uploadIcon}
                        alt=""
                        className="uploaded-image"
                        id="uploaded-image-1"
                      />
                    </div>
                    <span className="upload-text">Click to Upload Image</span>
                  </label>
                  <input
                    type="file"
                    id="thumbnailImage"
                    name="thumbnailImage"
                    className="upload-input"
                    accept="image/*"
                    onChange={handlethumbnailImageUpload}
                  />
                </div>
                {/* Optional: Display thumbnail image */}
                {thumbnailimage && <img src={thumbnailimage} alt="Thumbnail Image" className="image-preview" />}
              </div>

              <div className="form-row">
                <label htmlFor="bannerImage">Banner Image</label>
                <div className="banner-upload">
                  <label htmlFor="bannerImage" className="upload-label">
                    <div className="upload-button">
                      <img
                        src={uploadIcon}
                        alt=""
                        className="uploaded-image"
                        id="uploaded-image"
                      />
                    </div>
                    <span className="upload-text">Click to Upload Image</span>
                  </label>
                  <input
                    type="file"
                    id="bannerImage"
                    name="bannerImage"
                    className="upload-input"
                    accept="image/*"
                    onChange={handleImageUpload}
                  />
                </div>
                {/* Optional: Display banner image preview */}
                {imagePreview && <img src={imagePreview} alt="Image Preview" className="image-preview" />}
              </div>

              <div className="form-row">
                <label>Permalink</label>
                <div className='permaDisplay' title={`https://furnituremecca.zellesolutions.com${categoryData.permalink}`}>https://furnituremecca.zellesolutions.com{categoryData.permalink}</div>
              </div>

              <div className='SubmitBtn'>
                <CustomBtn
                  label="Add Category"
                  className="AddCatBtn"
                  onClick={handleAddCate}
                  type="button" // Ensure it's still a button to prevent default submission
                />
              </div>
            </form>
          </div>
        </div >
        <div className='Section2-Rightside'>
          {loading ? (
            <div className="loader" /> // Render loader when loading
          ) : (
            <DataTable
              columns={columns}
              data={Array.isArray(data) ? data.slice((currentPage - 1) * rowsPerPage, currentPage * rowsPerPage) : []}
              pagination
              paginationComponent={() => (
                <CustomPagination
                  rowsPerPage={rowsPerPage}
                  rowCount={Array.isArray(data) ? data.length : 0}
                  currentPage={currentPage}
                  onChangePage={handlePageChange}
                />
              )}
              customStyles={customStyles}
            />
          )}
        </div>
      </div >

    </div >
  );
};

export default ProductsCat;

----------------------------------------------------------------------------------------------------------

02-10-2024 11:44am (updated with revised fields of Slug & ParentCategory)

import React from 'react';
import axios from 'axios';
import { useState, useEffect } from 'react';
import './ECommerce.css';
import '../Page.css';
import CustomBtn from '../../Components/UI-Controls/Buttons/Btn';
import SearchBar from '../../Components/UI-Controls/SearchBar/Search';
import searchIcon from '../../Assets/Images/Search Bar 20 x 20.png';
import uploadIcon from '../../Assets/Images/UploadImg 24 x 24.png';
import DataTable from 'react-data-table-component';
import CustomPagination from '../../Components/UI-Controls/Pagination/Pagination';
import CustomDropdown from '../../Components/UI-Controls/Dropdown/dropdown';
import { AiOutlineEllipsis } from "react-icons/ai";
import { AiOutlineMore } from "react-icons/ai";
import defaultImage from "../../Assets/Images/defaultBannerImage 128 x 128.png";

const ProductsCat = () => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [categoryData, setCategoryData] = useState({
    name: '',
    slug: '',
    parentCategory: '0',
    description: '',
    displayType: '',
    menuOrder: '',
    permalink: '',
  });
  const [imagePreview, setImagePreview] = useState(null);
  const [thumbnailimage, setThumbnailImage] = useState(null);
  const [activeRowId, setActiveRowId] = useState(null);
  const [selectedRows, setSelectedRows] = useState([]);
  const [parentCatOpt, setParentCatOpt] = useState([]);
  const rowsPerPage = 5;

  useEffect(() => {
    console.log('Fetching data...');
    fetchTableData();
  }, []);

  async function fetchTableData() {
    setLoading(true);
    const URL = 'https://fm.skyhub.pk/api/v1/productCategory/get';

    try {
      const response = await fetch(URL);
      const users = await response.json();
      setLoading(false);

      // Reverse the categories and filter out categories with null or empty parent_name
      const reversedCategories = users.categories.reverse();
      const validParentCategories = reversedCategories
        .filter(cat => cat.name && cat.name.trim() !== '');

      // Map the filtered categories to an array of options
      const parentCatOptions = [
        { value: '', label: 'Select a parent category' }, // Empty option
        ...validParentCategories.map(cat => ({
          value: cat.uid,
          label: cat.name,
        })),
      ];

      // Set the options for the dropdown
      setParentCatOpt(parentCatOptions);
      setData(reversedCategories);  // In case you need the full dataset for other uses
      console.log(parentCatOptions);
    } catch (error) {
      setLoading(false);
      console.error('Error fetching data:', error);
    }
  }

  const handleSearch = () => console.log('Search has been triggered');

  const handlePageChange = (page) => {
    setCurrentPage(page);
  };

  const handleSelectAll = (isSelected) => {
    if (isSelected) {
      const allRowIds = data.map(row => row.uid);
      setSelectedRows(allRowIds);
    } else {
      setSelectedRows([]);
    }
  };

  const handleRowSelect = (rowId) => {
    setSelectedRows(prevSelected => {
      if (prevSelected.includes(rowId)) {
        return prevSelected.filter(id => id !== rowId);
      } else {
        return [...prevSelected, rowId];
      }
    });
  };

  // const handleInputChange = (e) => {
  //   const { name, value } = e.target;

  //   if (name === 'name') {
  //     // Generate the slug and permalink from the name field input
  //     const generatedSlug = value
  //       .toLowerCase()
  //       .replace(/\s+/g, '-')        // Replace spaces with hyphens
  //       .replace(/[^a-z0-9\-]/g, ''); // Remove any non-alphanumeric characters except hyphens

  //     setCategoryData((prevState) => ({
  //       ...prevState,
  //       [name]: value,                          // Update name field
  //       slug: prevState.slug || generatedSlug,  // Only auto-generate slug if it's empty
  //       permalink: `/category/${prevState.slug || generatedSlug}`, // Update permalink based on the slug
  //     }));
  //   } else if (name === 'slug') {
  //     // Allow user to update the slug manually, and update the permalink accordingly
  //     const formattedSlug = value
  //       .toLowerCase()
  //       .replace(/\s+/g, '-')        // Replace spaces with hyphens
  //       .replace(/[^a-z0-9\-]/g, ''); // Remove any non-alphanumeric characters except hyphens

  //     setCategoryData({
  //       ...categoryData,
  //       [name]: formattedSlug,
  //       permalink: `/category/${formattedSlug}`, // Update permalink based on manually entered slug
  //     });
  //   } else {
  //     // Handle other fields as normal
  //     setCategoryData({ ...categoryData, [name]: value });
  //   }
  // };

  const handleInputChange = (e) => {
    const { name, value } = e.target;

    if (name === 'name') {
      // Generate the slug and permalink from the name field input
      const generatedSlug = value
        .toLowerCase()
        .replace(/\s+/g, '-') // Replace spaces with hyphens
        .replace(/[^a-z0-9\-]/g, ''); // Remove any non-alphanumeric characters except hyphens

      // Update both name and slug together in one state update
      setCategoryData((prevState) => ({
        ...prevState,
        name: value, // Update name field
        slug: generatedSlug, // Auto-generate slug
        permalink: `/category/${generatedSlug}`, // Update permalink based on the new slug
      }));
    } else if (name === 'slug') {
      // Allow user to update the slug manually
      const formattedSlug = value
        .toLowerCase()
        .replace(/\s+/g, '-') // Replace spaces with hyphens
        .replace(/[^a-z0-9\-]/g, ''); // Remove any non-alphanumeric characters except hyphens

      setCategoryData((prevState) => ({
        ...prevState,
        slug: formattedSlug,
        permalink: `/category/${formattedSlug}`, // Update permalink based on manually entered slug
      }));
    } else {
      // Handle other fields as normal
      setCategoryData((prevState) => ({
        ...prevState,
        [name]: value,
      }));
    }
  };

  const handleImageUpload = (event) => {
    const file = event.target.files[0];
    const reader = new FileReader();
    reader.onload = () => {
      setImagePreview(reader.result);
    };
    if (file) {
      reader.readAsDataURL(file);
    }
  };

  const handlethumbnailImageUpload = (event) => {
    const file = event.target.files[0];
    const reader = new FileReader();
    reader.onload = () => {
      setThumbnailImage(reader.result);
    };
    if (file) {
      reader.readAsDataURL(file);
    }
  };

  const handleAddCate = async () => {
    // Use the slug from state, or generate a new one if the slug is empty
    let slugValue = categoryData.slug || categoryData.name
      .toLowerCase()
      .replace(/\s+/g, '-')        // Replace spaces with hyphens
      .replace(/[^a-z0-9\-]/g, ''); // Remove any non-alphanumeric characters except hyphens

    let permalinkValue = `/category/${slugValue}`;

    // Create a FormData object
    const formData = new FormData();

    // Append form data
    formData.append('name', categoryData.name);
    formData.append('slug', slugValue);  // Use the slug from state or the auto-generated slug

    // If parentCategory is empty, set it to '0'
    const parentCategoryValue = categoryData.parentCategory || '0';
    formData.append('parent', parentCategoryValue);

    formData.append('description', categoryData.description);

    // Conditionally set displayType based on the value of categoryData.displayType
    const displayValue = categoryData.displayType === "show" ? "1" : "0";
    formData.append('display', displayValue);

    formData.append('meun_order', categoryData.menuOrder);
    formData.append('permalink', permalinkValue);  // Use the updated permalink

    // Append thumbnail image file if exists
    const thumbnailImageInput = document.getElementById('thumbnailImage');
    if (thumbnailImageInput.files[0]) {
      formData.append('image', thumbnailImageInput.files[0]);
    }

    // Append banner image file if exists
    const bannerImageInput = document.getElementById('bannerImage');
    if (bannerImageInput.files[0]) {
      formData.append('bannerImage', bannerImageInput.files[0]);
    }

    try {
      setLoading(true); // Start loading state
      console.log('Form submission started with data:', categoryData);

      const response = await axios.post('https://fm.skyhub.pk/api/v1/productCategory/add', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      // Handle successful response
      console.log('Form submission successful:', response.data);

      // Optionally reset the form or update the UI here
      setCategoryData({
        name: '',
        slug: '',
        parentCategory: '',
        description: '',
        displayType: '',
        menuOrder: '',
        permalink: '', // Reset permalink as well
      });
      setImagePreview(null); // Reset banner-image preview
      setThumbnailImage(null); // Reset thumbnail-image preview
      fetchTableData();
    } catch (error) {
      // Detailed error handling
      if (error.response) {
        console.error('Error submitting form:', {
          status: error.response.status,
          data: error.response.data,
          headers: error.response.headers,
        });
        alert(`Error: ${error.response.data.message || 'An error occurred. Please try again.'}`);
      } else if (error.request) {
        console.error('Error: No response received:', error.request);
        alert('Error: No response from server. Please check your connection and try again.');
      } else {
        console.error('Error:', error.message);
        alert('Error: ' + error.message);
      }
    } finally {
      setLoading(false); // End loading state
      console.log('Form submission ended.');
    }
  };

  const customStyles = {
    headCells: {
      style: {
        height: '52px',
        borderRadius: '5px 5px 5px 5px',
        background: '#FDFDFD',
        opacity: '1',
        textAlign: 'center',
        justifyContent: 'center',
        border: 'none',
        color: 'var(--text-color)',
        fontFamily: 'poppins',
        fontWeight: '500',
        fontSize: '14px',
        overflow: 'wrap', // Prevents content overflow in headers
        textOverflow: 'ellipsis',
        whiteSpace: 'normal', // Allows wrapping in header cells
      },
    },
    cells: {
      style: {
        height: '66px',
        justifyContent: 'center',
        textAlign: 'center',
        background: '#FFFFFF',
        borderTop: '1px solid #F0F0F0',
        borderRight: 'none',
        color: '#858585',
        fontFamily: 'poppins',
        fontWeight: '400',
        fontSize: '12px',
        whiteSpace: 'normal', // Allows text to wrap in cells
        wordBreak: 'break-word', // Breaks long words if necessary
        overflow: 'wrap', // Prevents content overflow
        textOverflow: 'ellipsis', // Shows ellipsis for long content
      },
    },
  };

  const columns = [
    {
      name: (
        <input
          type="checkbox"
          style={{ margin: 0 }}
          onChange={(e) => handleSelectAll(e.target.checked)}
          checked={selectedRows.length === data.length && data.length > 0}
        />
      ),
      cell: (row) => (
        <input
          type="checkbox"
          style={{ margin: 0 }}
          onChange={() => handleRowSelect(row.uid)}
          checked={selectedRows.includes(row.uid)}
        />
      ),
      ignoreRowClick: true,
      allowOverflow: true,
      button: true,
      width: '50px',
    },
    {
      name: 'Image',
      cell: (row) => (
        <img
          src={row.image ? `http://fm.skyhub.pk${row.image}` : defaultImage}
          alt={row.name}
          width="auto"
          height="40px"
          style={{ objectFit: 'cover' }}
        />
      ),
      width: '100px',
    },
    {
      name: 'Name',
      selector: (row) => row.name,
      width: '120px',
    },
    {
      name: 'Description',
      selector: (row) => row.description,
      width: '150px',
    },
    {
      name: 'Slug',
      selector: (row) => row.slug,
      width: '100px',
    },
    {
      name: 'Count',
      selector: (row) => row.uid,
      width: '80px',
    },
    {
      name: 'Action',
      cell: (row) => {
        const isActive = activeRowId === row.uid; // Check if this row is the active one
        console.log(row.uid); // Log the uid for debugging

        return (
          <div style={{ position: 'relative' }}>
            <button
              style={{
                width: '25px',
                height: '25px',
                border: 'none',
                backgroundColor: 'transparent',
                cursor: 'pointer',
                boxShadow: 'rgba(0, 0, 0, 0.16) 0px 1px 4px',
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
                padding: 0,
              }}
              onClick={() => {
                // Toggle the dropdown
                if (isActive) {
                  setActiveRowId(null); // Close the dropdown
                } else {
                  setActiveRowId(row.uid); // Open the clicked dropdown using uid
                }
              }}
            >
              {isActive ? <AiOutlineMore /> : <AiOutlineEllipsis />} {/* Toggle icons */}
            </button>
            {isActive && ( // Render the dropdown only if active
              <div
                className="dropdown"
                style={{
                  position: 'absolute',
                  top: '20%', // Align dropdown vertically centered
                  left: '-400%', // Position it to the left of the button (adjust based on width)
                  transform: 'translateY(-5%)', // Center vertically relative to the button
                  backgroundColor: 'white',
                  // border: '1px solid #ccc',
                  border: 'none',
                  zIndex: 1,
                  width: '100px',
                  borderRadius: '4px 0 0 4px',
                  boxShadow: 'rgba(0, 0, 0, 0.16) 0px 1px 4px',
                }}
              >
                <ul style={{ listStyleType: 'none', padding: '5px', margin: '10px' }}>
                  <li
                    style={{ padding: '5px', cursor: 'pointer' }}
                    onClick={() => console.log('Edit clicked for:', row)}
                  >
                    Edit
                  </li>
                  <li
                    style={{ padding: '5px', cursor: 'pointer' }}
                    onClick={() => console.log('Delete clicked for:', row)}
                  >
                    Delete
                  </li>
                  <li
                    style={{ padding: '5px', cursor: 'pointer' }}
                    onClick={() => console.log('View clicked for:', row)}
                  >
                    View
                  </li>
                </ul>
              </div>
            )}
          </div>
        );
      },
      width: '85px',
    },
  ];

  // Options for the Display Type Dropdown
  const displayTypeOptions = [
    { value: 'Show', label: 'Show' },
    { value: 'Hide', label: 'Hide' },
  ];

  // Handler for dropdown change
  const handleParentCat = (selectedValue) => {
    setCategoryData((prevState) => ({
      ...prevState,
      parentCategory: selectedValue,  // Update the state with selected value
    }));
  };

  // Handler for dropdown change
  const handleDisplayType = (selectedValue) => {
    setCategoryData((prevState) => ({
      ...prevState,
      displayType: selectedValue,  // Update the state with selected value
    }));
  };

  return (
    <div className="ProductCatPage">
      <div className="CatSection-01">
        <span className='Section1-Leftside'>
          Categories
        </span>
        <div className='Section1-Rightside'>
          <SearchBar onSearch={handleSearch} icon={searchIcon} placeholder="Search category by name" />
        </div>
      </div>

      <div className="CatSection-02">
        <div className='Section2-Leftside'>
          <div className='Header'>Add New Category</div>
          <div className="NewCat-Add">
            <form onSubmit={(e) => { e.preventDefault(); handleAddCate(); }}>
              <div className="form-row">
                <label htmlFor="name">Name<span className='superscript'>*</span></label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  placeholder="Enter Category Name..."
                  value={categoryData.name}
                  onChange={handleInputChange}
                  required // Optional: Add if field is mandatory
                />
              </div>

              <div className="form-row">
                <label htmlFor="slug">Slug<span className='superscript'>*</span></label>
                <input
                  type="text"
                  id="slug"
                  name="slug"
                  placeholder="Enter Slug..."
                  value={categoryData.slug}
                  onChange={handleInputChange}
                  required
                />
              </div>

              <div className="form-row">
                <label htmlFor="menuOrder">Menu Order<span className='superscript'>*</span></label>
                <input
                  type="number" // Change to number for validation
                  id="menuOrder"
                  name="menuOrder"
                  placeholder='Enter Menu Order...'
                  value={categoryData.menuOrder}
                  onChange={handleInputChange}
                  required
                />
              </div>

              {/* <div className="form-row">
                <label htmlFor="parentCategory">
                  Parent Category<span className="superscript">*</span>
                </label>
                <div className="custom-dropdown-wrapper">
                  <CustomDropdown
                    options={parentCatOptions}
                    selectedOption={categoryData.parentCategory}
                    handleOptionChange={handleParentCat}
                  />
                </div>
              </div> */}

              <div className="form-row">
                <label htmlFor="parentCategory">
                  Parent Category<span className="superscript">*</span>
                </label>
                <div className="custom-dropdown-wrapper">
                  <CustomDropdown
                    options={parentCatOpt}  // Passing the filtered categories as options
                    selectedOption={categoryData.parentCategory || ''}  // Use '' as default for selected option
                    handleOptionChange={handleParentCat}
                  />
                </div>
              </div>

              <div className="form-row">
                <label htmlFor="description">Description</label>
                <textarea
                  id="description"
                  name="description"
                  placeholder='Enter Product Description here...'
                  value={categoryData.description}
                  onChange={handleInputChange}
                />
              </div>

              <div className="form-row">
                <label htmlFor="displayType">Display Type<span className='superscript'>*</span></label>
                <div className="custom-dropdown-wrapper">
                  <CustomDropdown
                    options={displayTypeOptions}
                    selectedOption={categoryData.displayType}
                    handleOptionChange={handleDisplayType}
                  />
                </div>
              </div>

              <div className="form-row">
                <label htmlFor="thumbnailImage">Thumbnail Image</label>
                <div className="banner-upload">
                  <label htmlFor="thumbnailImage" className="upload-label">
                    <div className="upload-button">
                      <img
                        src={uploadIcon}
                        alt=""
                        className="uploaded-image"
                        id="uploaded-image-1"
                      />
                    </div>
                    <span className="upload-text">Click to Upload Image</span>
                  </label>
                  <input
                    type="file"
                    id="thumbnailImage"
                    name="thumbnailImage"
                    className="upload-input"
                    accept="image/*"
                    onChange={handlethumbnailImageUpload}
                  />
                </div>
                {/* Optional: Display thumbnail image */}
                {thumbnailimage && <img src={thumbnailimage} alt="Thumbnail Image" className="image-preview" />}
              </div>

              <div className="form-row">
                <label htmlFor="bannerImage">Banner Image</label>
                <div className="banner-upload">
                  <label htmlFor="bannerImage" className="upload-label">
                    <div className="upload-button">
                      <img
                        src={uploadIcon}
                        alt=""
                        className="uploaded-image"
                        id="uploaded-image"
                      />
                    </div>
                    <span className="upload-text">Click to Upload Image</span>
                  </label>
                  <input
                    type="file"
                    id="bannerImage"
                    name="bannerImage"
                    className="upload-input"
                    accept="image/*"
                    onChange={handleImageUpload}
                  />
                </div>
                {/* Optional: Display banner image preview */}
                {imagePreview && <img src={imagePreview} alt="Image Preview" className="image-preview" />}
              </div>

              <div className="form-row">
                <label>Permalink</label>
                <div className='permaDisplay' title={`https://furnituremecca.zellesolutions.com${categoryData.permalink}`}>https://furnituremecca.zellesolutions.com{categoryData.permalink}</div>
              </div>

              <div className='SubmitBtn'>
                <CustomBtn
                  label="Add Category"
                  className="AddCatBtn"
                  onClick={handleAddCate}
                  type="button" // Ensure it's still a button to prevent default submission
                />
              </div>
            </form>
          </div>
        </div >
        <div className='Section2-Rightside'>
          {loading ? (
            <div className="loader" /> // Render loader when loading
          ) : (
            <DataTable
              columns={columns}
              data={Array.isArray(data) ? data.slice((currentPage - 1) * rowsPerPage, currentPage * rowsPerPage) : []}
              pagination
              paginationComponent={() => (
                <CustomPagination
                  rowsPerPage={rowsPerPage}
                  rowCount={Array.isArray(data) ? data.length : 0}
                  currentPage={currentPage}
                  onChangePage={handlePageChange}
                />
              )}
              customStyles={customStyles}
            />
          )}
        </div>
      </div >

    </div >
  );
};

export default ProductsCat;

---------------------------------------------------------------------------------------------------------------

03-10-2024 12:01pm

import React from 'react';
import axios from 'axios';
import { useState, useEffect } from 'react';
import './ECommerce.css';
import '../Page.css';
import CustomBtn from '../../Components/UI-Controls/Buttons/Btn';
import SearchBar from '../../Components/UI-Controls/SearchBar/Search';
import searchIcon from '../../Assets/Images/Search Bar 20 x 20.png';
import uploadIcon from '../../Assets/Images/UploadImg 24 x 24.png';
import DataTable from 'react-data-table-component';
import CustomPagination from '../../Components/UI-Controls/Pagination/Pagination';
import CustomDropdown from '../../Components/UI-Controls/Dropdown/dropdown';
import { AiOutlineEllipsis } from "react-icons/ai";
import { AiOutlineMore } from "react-icons/ai";
import defaultImage from "../../Assets/Images/defaultBannerImage 128 x 128.png";
import Loader from '../../Components/UI-Controls/Loader/Loader';

const ProductsCat = () => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [categoryData, setCategoryData] = useState({
    name: '',
    slug: '',
    parentCategory: '0',
    description: '',
    displayType: '',
    menuOrder: '',
    permalink: '',
  });
  const [imagePreview, setImagePreview] = useState(null);
  const [thumbnailimage, setThumbnailImage] = useState(null);
  const [activeRowId, setActiveRowId] = useState(null);
  const [selectedRows, setSelectedRows] = useState([]);
  const [parentCatOpt, setParentCatOpt] = useState([]);
  const [showConfirm, setShowConfirm] = useState(false);
  const [currentRowId, setCurrentRowId] = useState(null);
  const rowsPerPage = 10;

  useEffect(() => {
    console.log('Fetching data...');
    fetchTableData();
  }, []);

  async function fetchTableData() {
    setLoading(true);
    const URL = 'https://fm.skyhub.pk/api/v1/productCategory/get';

    try {
      const response = await fetch(URL);
      const users = await response.json();
      setLoading(false);

      // Reverse the categories and filter out categories with null or empty parent_name
      const reversedCategories = users.categories.reverse();
      const validParentCategories = reversedCategories
        .filter(cat => cat.name && cat.name.trim() !== '');

      // Map the filtered categories to an array of options
      const parentCatOptions = [
        { value: '', label: 'Select a parent category' }, // Empty option
        ...validParentCategories.map(cat => ({
          value: cat.uid,
          label: cat.name,
        })),
      ];

      // Set the options for the dropdown
      setParentCatOpt(parentCatOptions);
      setData(reversedCategories);  // In case you need the full dataset for other uses
      console.log(parentCatOptions);
    } catch (error) {
      setLoading(false);
      console.error('Error fetching data:', error);
    }
  }

  const handleSearch = () => console.log('Search has been triggered');
  
  const confirmDelete = (id) => {
    setCurrentRowId(id); // Set the ID of the item to delete
    setShowConfirm(true); // Show confirmation dialog
  };

  const handleDelete = () => {
    console.log(`Deleting item with ID: ${currentRowId}`); // Log the ID before deletion
    if (currentRowId) {
      deleteItem(currentRowId);
      setShowConfirm(false); // Close the confirmation dialog
    }
  };

  const deleteItem = async (id) => {
    try {
      console.log(`Attempting to delete item with ID: ${id}`); // Log the ID
      const response = await fetch(`https://fm.skyhub.pk/api/v1/productCategory/${id}`, {
        method: 'DELETE',
      });
      
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      
      const responseData = await response.json(); // Check response data if needed
      console.log(`Delete response: `, responseData);
      
      console.log(`Item with ID ${id} deleted successfully.`);
      
      // Update local state to remove the deleted item
      setData((prevItems) => prevItems.filter(item => item._id !== id));
      
    } catch (error) {
      console.error('Error deleting item:', error);
      alert('Failed to delete the item. Please try again.');
    }
  };

  const cancelDelete = () => {
    setShowConfirm(false); // Close the confirmation dialog
  };

  const handlePageChange = (page) => {
    setCurrentPage(page);
  };

  const handleSelectAll = (isSelected) => {
    if (isSelected) {
      const allRowIds = data.map(row => row.uid);
      setSelectedRows(allRowIds);
    } else {
      setSelectedRows([]);
    }
  };

  const handleRowSelect = (rowId) => {
    setSelectedRows(prevSelected => {
      if (prevSelected.includes(rowId)) {
        return prevSelected.filter(id => id !== rowId);
      } else {
        return [...prevSelected, rowId];
      }
    });
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;

    if (name === 'name') {
      // Generate the slug and permalink from the name field input
      const generatedSlug = value
        .toLowerCase()
        .replace(/\s+/g, '-') // Replace spaces with hyphens
        .replace(/[^a-z0-9\-]/g, ''); // Remove any non-alphanumeric characters except hyphens

      // Update both name and slug together in one state update
      setCategoryData((prevState) => ({
        ...prevState,
        name: value, // Update name field
        slug: generatedSlug, // Auto-generate slug
        permalink: `/category/${generatedSlug}`, // Update permalink based on the new slug
      }));
    } else if (name === 'slug') {
      // Allow user to update the slug manually
      const formattedSlug = value
        .toLowerCase()
        .replace(/\s+/g, '-') // Replace spaces with hyphens
        .replace(/[^a-z0-9\-]/g, ''); // Remove any non-alphanumeric characters except hyphens

      setCategoryData((prevState) => ({
        ...prevState,
        slug: formattedSlug,
        permalink: `/category/${formattedSlug}`, // Update permalink based on manually entered slug
      }));
    } else {
      // Handle other fields as normal
      setCategoryData((prevState) => ({
        ...prevState,
        [name]: value,
      }));
    }
  };

  const handleImageUpload = (event) => {
    const file = event.target.files[0];
    const reader = new FileReader();
    reader.onload = () => {
      setImagePreview(reader.result);
    };
    if (file) {
      reader.readAsDataURL(file);
    }
  };

  const handlethumbnailImageUpload = (event) => {
    const file = event.target.files[0];
    const reader = new FileReader();
    reader.onload = () => {
      setThumbnailImage(reader.result);
    };
    if (file) {
      reader.readAsDataURL(file);
    }
  };

  const handleAddCate = async () => {
    // Use the slug from state, or generate a new one if the slug is empty
    let slugValue = categoryData.slug || categoryData.name
      .toLowerCase()
      .replace(/\s+/g, '-')        // Replace spaces with hyphens
      .replace(/[^a-z0-9\-]/g, ''); // Remove any non-alphanumeric characters except hyphens

    let permalinkValue = `/category/${slugValue}`;

    // Create a FormData object
    const formData = new FormData();

    // Append form data
    formData.append('name', categoryData.name);
    formData.append('slug', slugValue);  // Use the slug from state or the auto-generated slug

    // If parentCategory is empty, set it to '0'
    const parentCategoryValue = categoryData.parentCategory || '0';
    formData.append('parent', parentCategoryValue);

    formData.append('description', categoryData.description);

    // Conditionally set displayType based on the value of categoryData.displayType
    const displayValue = categoryData.displayType === "show" ? "1" : "0";
    formData.append('display', displayValue);

    formData.append('meun_order', categoryData.menuOrder);
    formData.append('permalink', permalinkValue);  // Use the updated permalink

    // Append thumbnail image file if exists
    const thumbnailImageInput = document.getElementById('thumbnailImage');
    if (thumbnailImageInput.files[0]) {
      formData.append('image', thumbnailImageInput.files[0]);
    }

    // Append banner image file if exists
    const bannerImageInput = document.getElementById('bannerImage');
    if (bannerImageInput.files[0]) {
      formData.append('bannerImage', bannerImageInput.files[0]);
    }

    try {
      setLoading(true); // Start loading state
      console.log('Form submission started with data:', categoryData);

      const response = await axios.post('https://fm.skyhub.pk/api/v1/productCategory/add', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      // Handle successful response
      console.log('Form submission successful:', response.data);

      // Optionally reset the form or update the UI here
      setCategoryData({
        name: '',
        slug: '',
        parentCategory: '',
        description: '',
        displayType: '',
        menuOrder: '',
        permalink: '', // Reset permalink as well
      });
      setImagePreview(null); // Reset banner-image preview
      setThumbnailImage(null); // Reset thumbnail-image preview
      fetchTableData();
    } catch (error) {
      // Detailed error handling
      if (error.response) {
        console.error('Error submitting form:', {
          status: error.response.status,
          data: error.response.data,
          headers: error.response.headers,
        });
        alert(`Error: ${error.response.data.message || 'An error occurred. Please try again.'}`);
      } else if (error.request) {
        console.error('Error: No response received:', error.request);
        alert('Error: No response from server. Please check your connection and try again.');
      } else {
        console.error('Error:', error.message);
        alert('Error: ' + error.message);
      }
    } finally {
      setLoading(false); // End loading state
      console.log('Form submission ended.');
    }
  };

  const customStyles = {
    headCells: {
      style: {
        height: '52px',
        borderRadius: '5px 5px 5px 5px',
        background: '#FDFDFD',
        opacity: '1',
        textAlign: 'center',
        justifyContent: 'center',
        border: 'none',
        color: 'var(--text-color)',
        fontFamily: 'poppins',
        fontWeight: '500',
        fontSize: '14px',
        overflow: 'wrap', // Prevents content overflow in headers
        textOverflow: 'ellipsis',
        whiteSpace: 'normal', // Allows wrapping in header cells
      },
    },
    cells: {
      style: {
        height: '66px',
        justifyContent: 'center',
        textAlign: 'center',
        background: '#FFFFFF',
        borderTop: '1px solid #F0F0F0',
        borderRight: 'none',
        color: '#858585',
        fontFamily: 'poppins',
        fontWeight: '400',
        fontSize: '12px',
        whiteSpace: 'normal', // Allows text to wrap in cells
        wordBreak: 'break-word', // Breaks long words if necessary
        overflow: 'wrap', // Prevents content overflow
        textOverflow: 'ellipsis', // Shows ellipsis for long content
      },
    },
  };

  const columns = [
    {
      name: (
        <input
          type="checkbox"
          style={{ margin: 0 }}
          onChange={(e) => handleSelectAll(e.target.checked)}
          checked={selectedRows.length === data.length && data.length > 0}
        />
      ),
      cell: (row) => (
        <input
          type="checkbox"
          style={{ margin: 0 }}
          onChange={() => handleRowSelect(row.uid)}
          checked={selectedRows.includes(row.uid)}
        />
      ),
      ignoreRowClick: true,
      allowOverflow: true,
      button: true,
      width: '50px',
    },
    {
      name: 'Image',
      cell: (row) => (
        <img
          src={row.image ? `http://fm.skyhub.pk${row.image}` : defaultImage}
          alt={row.name}
          width="auto"
          height="40px"
          style={{ objectFit: 'cover' }}
        />
      ),
      width: '100px',
    },
    {
      name: 'Name',
      selector: (row) => row.name,
      width: '120px',
    },
    {
      name: 'Description',
      selector: (row) => row.description,
      width: '150px',
    },
    {
      name: 'Slug',
      selector: (row) => row.slug,
      width: '100px',
    },
    {
      name: 'Count',
      selector: (row) => row.uid,
      width: '80px',
    },
    // {
    //   name: 'Action',
    //   cell: (row) => {
    //     const isActive = activeRowId === row.uid; // Check if this row is the active one
    //     console.log(row.uid); // Log the uid for debugging

    //     return (
    //       <div style={{ position: 'relative' }}>
    //         <button
    //           style={{
    //             width: '30px',
    //             height: '30px',
    //             border: 'none',
    //             borderRadius: '5px',
    //             boxShadow: '0px 0px 8px 0px #0000001A',
    //             backgroundColor: 'transparent',
    //             cursor: 'pointer',
    //             display: 'flex',
    //             justifyContent: 'center',
    //             alignItems: 'center',
    //             padding: 0,
    //           }}
    //           onClick={() => {
    //             // Toggle the dropdown
    //             if (isActive) {
    //               setActiveRowId(null); // Close the dropdown
    //             } else {
    //               setActiveRowId(row.uid); // Open the clicked dropdown using uid
    //             }
    //           }}
    //         >
    //           {isActive ? <AiOutlineMore /> : <AiOutlineEllipsis />} {/* Toggle icons */}
    //         </button>
    //         {isActive && ( // Render the dropdown only if active
    //           <div
    //             className="dropdown"
    //             style={{
    //               position: 'absolute',
    //               top: '19%', // Align dropdown vertically centered
    //               left: '-330%', // Position it to the left of the button (adjust based on width)
    //               transform: 'translateY(-5%)', // Center vertically relative to the button
    //               backgroundColor: 'white',
    //               // border: '1px solid #ccc',
    //               border: 'none',
    //               zIndex: 1,
    //               width: '100px',
    //               borderRadius: 'none',
    //               boxShadow: 'rgba(0, 0, 0, 0.16) 0px 1px 4px',
    //             }}
    //           >
    //             <ul style={{ listStyleType: 'none', padding: '5px', margin: '10px' }}>
    //               <li
    //                 style={{ padding: '5px', cursor: 'pointer' }}
    //                 onClick={() => console.log('Edit clicked for:', row)}
    //               >
    //                 Edit
    //               </li>
    //               <li
    //                 style={{ padding: '5px', cursor: 'pointer' }}
    //                 onClick={() => console.log('Delete clicked for:', row)}
    //               >
    //                 Delete
    //               </li>
    //               <li
    //                 style={{ padding: '5px', cursor: 'pointer' }}
    //                 onClick={() => console.log('View clicked for:', row)}
    //               >
    //                 View
    //               </li>
    //             </ul>
    //           </div>
    //         )}
    //       </div>
    //     );
    //   },
    //   width: '85px',
    // },
    // {
    //   name: 'Action',
    //   cell: (row) => {
    //     const isActive = activeRowId === row._id; // Check if this row is the active one

    //     return (
    //       <div style={{ position: 'relative' }}>
    //         <button
    //           style={{
    //             width: '30px',
    //             height: '30px',
    //             border: 'none',
    //             borderRadius: '5px',
    //             boxShadow: '0px 0px 8px 0px #0000001A',
    //             backgroundColor: 'transparent',
    //             cursor: 'pointer',
    //             display: 'flex',
    //             justifyContent: 'center',
    //             alignItems: 'center',
    //             padding: 0,
    //           }}
    //           onClick={() => {
    //             // Toggle the dropdown
    //             if (isActive) {
    //               setActiveRowId(null); // Close the dropdown
    //             } else {
    //               setActiveRowId(row._id); // Open the clicked dropdown using _id
    //             }
    //           }}
    //         >
    //           {isActive ? <AiOutlineMore /> : <AiOutlineEllipsis />} {/* Toggle icons */}
    //         </button>
    //         {isActive && ( // Render the dropdown only if active
    //           <div
    //             className="dropdown"
    //             style={{
    //               position: 'absolute',
    //               top: '19%', // Align dropdown vertically centered
    //               left: '-330%', // Position it to the left of the button (adjust based on width)
    //               transform: 'translateY(-5%)', // Center vertically relative to the button
    //               backgroundColor: 'white',
    //               border: 'none',
    //               zIndex: 1,
    //               width: '100px',
    //               boxShadow: 'rgba(0, 0, 0, 0.16) 0px 1px 4px',
    //             }}
    //           >
    //             <ul style={{ listStyleType: 'none', padding: '5px', margin: '10px' }}>
    //               <li
    //                 style={{ padding: '5px', cursor: 'pointer' }}
    //                 onClick={() => {
    //                   console.log('Edit clicked for:', row._id); // Log the _id for Edit action
    //                 }}
    //               >
    //                 Edit
    //               </li>
    //               <li
    //                 style={{ padding: '5px', cursor: 'pointer' }}
    //                 onClick={() => {
    //                   console.log('Delete clicked for:', row._id); // Log the _id for Delete action
    //                 }}
    //               >
    //                 Delete
    //               </li>
    //               <li
    //                 style={{ padding: '5px', cursor: 'pointer' }}
    //                 onClick={() => {
    //                   console.log('View clicked for:', row._id); // Log the _id for View action
    //                 }}
    //               >
    //                 View
    //               </li>
    //             </ul>
    //           </div>
    //         )}
    //       </div>
    //     );
    //   },
    //   width: '85px',
    // },
    // {
    //   name: 'Action',
    //   cell: (row) => {
    //     const isActive = activeRowId === row._id; // Check if this row is the active one

    //     return (
    //       <div style={{ position: 'relative' }}>
    //         <button
    //           style={{
    //             width: '30px',
    //             height: '30px',
    //             border: 'none',
    //             borderRadius: '5px',
    //             boxShadow: '0px 0px 8px 0px #0000001A',
    //             backgroundColor: 'transparent',
    //             cursor: 'pointer',
    //             display: 'flex',
    //             justifyContent: 'center',
    //             alignItems: 'center',
    //             padding: 0,
    //           }}
    //           onClick={() => {
    //             // Toggle the dropdown
    //             if (isActive) {
    //               setActiveRowId(null); // Close the dropdown
    //             } else {
    //               setActiveRowId(row._id); // Open the clicked dropdown using _id
    //             }
    //           }}
    //         >
    //           {isActive ? <AiOutlineMore /> : <AiOutlineEllipsis />} {/* Toggle icons */}
    //         </button>
    //         {isActive && ( // Render the dropdown only if active
    //           <div
    //             className="dropdown"
    //             style={{
    //               position: 'absolute',
    //               top: '30%', // Align dropdown vertically centered
    //               left: '-685%', // Position it to the left of the button (adjust based on width)
    //               transform: 'translateY(-5%)', // Center vertically relative to the button
    //               backgroundColor: 'white',
    //               border: 'none',
    //               zIndex: 1,
    //               width: '184px',
    //               height: '167px',
    //               // padding: '11px',
    //               boxShadow: 'rgba(0, 0, 0, 0.16) 0px 1px 4px',
    //               gap: 10,
    //               fontFamily: 'poppins',
    //               // lineHeight: 21,
    //               fontSize: 14,
    //               fontWeight: 400,
    //             }}
    //           >
    //             <ul style={{ listStyleType: 'none', padding: '5px', margin: '10px' }}>
    //               <li
    //                 style={{ padding: '5px', cursor: 'pointer' }}
    //                 onClick={() => {
    //                   console.log('Edit clicked for:', row._id, 'Data:', row);
    //                 }}
    //               >
    //                 Edit
    //               </li>
    //               <li
    //                 style={{ padding: '5px', cursor: 'pointer' }}
    //                 onClick={() => {
    //                   console.log('Quick Edit clicked for:', row._id, 'Data:', row);
    //                 }}
    //               >
    //                 Quick Edit
    //               </li>
    //               <li
    //                 style={{ padding: '5px', cursor: 'pointer' }}
    //                 onClick={() => {
    //                   console.log('Delete clicked for:', row._id, 'Data:', row);
    //                 }}
    //               >
    //                 Delete
    //               </li>
    //               <li
    //                 style={{ padding: '5px', cursor: 'pointer' }}
    //                 onClick={() => {
    //                   console.log('View clicked for:', row._id, 'Data:', row);
    //                 }}
    //               >
    //                 View
    //               </li>
    //               <li
    //                 style={{ padding: '5px', cursor: 'pointer' }}
    //                 onClick={() => {
    //                   console.log('Duplicate clicked for:', row._id, 'Data:', row);
    //                 }}
    //               >
    //                 Duplicate
    //               </li>
    //             </ul>
    //           </div>
    //         )}
    //       </div>
    //     );
    //   },
    //   width: '85px',
    // },
    {
      name: 'Action',
      cell: (row) => {
        const isActive = activeRowId === row._id; // Check if this row is the active one

        return (
          <div style={{ position: 'relative' }}>
            <button
              style={{
                width: '30px',
                height: '30px',
                border: 'none',
                borderRadius: '5px',
                boxShadow: '0px 0px 8px 0px #0000001A',
                backgroundColor: 'transparent',
                cursor: 'pointer',
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
                padding: 0,
              }}
              onClick={() => {
                // Toggle the dropdown
                if (isActive) {
                  setActiveRowId(null); // Close the dropdown
                } else {
                  setActiveRowId(row._id); // Open the clicked dropdown using _id
                }
              }}
            >
              {isActive ? <AiOutlineMore /> : <AiOutlineEllipsis />} {/* Toggle icons */}
            </button>
            {isActive && ( // Render the dropdown only if active
              <div
                className="dropdown"
                style={{
                  position: 'absolute',
                  top: '30%', // Align dropdown vertically centered
                  left: '-685%', // Position it to the left of the button (adjust based on width)
                  transform: 'translateY(-5%)', // Center vertically relative to the button
                  backgroundColor: 'white',
                  border: 'none',
                  zIndex: 1,
                  width: '184px',
                  height: '167px',
                  boxShadow: 'rgba(0, 0, 0, 0.16) 0px 1px 4px',
                  gap: 10,
                  fontFamily: 'poppins',
                  fontSize: 14,
                  fontWeight: 400,
                }}
              >
                <ul style={{ listStyleType: 'none', padding: '5px', margin: '10px' }}>
                  <li
                    style={{ padding: '5px', cursor: 'pointer' }}
                    onClick={() => {
                      console.log('Edit clicked for:', row._id, 'Data:', row);
                    }}
                  >
                    Edit
                  </li>
                  <li
                    style={{ padding: '5px', cursor: 'pointer' }}
                    onClick={() => {
                      console.log('Quick Edit clicked for:', row._id, 'Data:', row);
                    }}
                  >
                    Quick Edit
                  </li>
                  <li
                    style={{ padding: '5px', cursor: 'pointer' }}
                    onClick={() => confirmDelete(row._id)} // Call confirmDelete on click
                  >
                    Delete
                  </li>
                  <li
                    style={{ padding: '5px', cursor: 'pointer' }}
                    onClick={() => {
                      console.log('View clicked for:', row._id, 'Data:', row);
                    }}
                  >
                    View
                  </li>
                  <li
                    style={{ padding: '5px', cursor: 'pointer' }}
                    onClick={() => {
                      console.log('Duplicate clicked for:', row._id, 'Data:', row);
                    }}
                  >
                    Duplicate
                  </li>
                </ul>
              </div>
            )}
          </div>
        );
      },
      width: '85px',
    }
  ];

  // Options for the Display Type Dropdown
  const displayTypeOptions = [
    { value: 'Show', label: 'Show' },
    { value: 'Hide', label: 'Hide' },
  ];

  // Handler for dropdown change
  const handleParentCat = (selectedValue) => {
    setCategoryData((prevState) => ({
      ...prevState,
      parentCategory: selectedValue,  // Update the state with selected value
    }));
  };

  // Handler for dropdown change
  const handleDisplayType = (selectedValue) => {
    setCategoryData((prevState) => ({
      ...prevState,
      displayType: selectedValue,  // Update the state with selected value
    }));
  };

  return (
    <div className="ProductCatPage">
      <div className="CatSection-01">
        <span className='Section1-Leftside'>
          Categories
        </span>
        <div className='Section1-Rightside'>
          <SearchBar onSearch={handleSearch} icon={searchIcon} placeholder="Search category by name" />
        </div>
      </div>

      <div className="CatSection-02">
        <div className='Section2-Leftside'>
          <div className='Header'>Add New Category</div>
          <div className="NewCat-Add">
            {loading && (
              <div className="backdrop">
                <Loader />
              </div>
            )}
            <form onSubmit={(e) => { e.preventDefault(); handleAddCate(); }}>
              <div className="form-row">
                <label htmlFor="name">Name<span className='superscript'>*</span></label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  placeholder="Enter Category Name..."
                  value={categoryData.name}
                  onChange={handleInputChange}
                  required // Optional: Add if field is mandatory
                />
              </div>

              <div className="form-row">
                <label htmlFor="slug">Slug<span className='superscript'>*</span></label>
                <input
                  type="text"
                  id="slug"
                  name="slug"
                  placeholder="Enter Slug..."
                  value={categoryData.slug}
                  onChange={handleInputChange}
                  required
                />
              </div>

              <div className="form-row">
                <label htmlFor="menuOrder">Menu Order<span className='superscript'>*</span></label>
                <input
                  type="number" // Change to number for validation
                  id="menuOrder"
                  name="menuOrder"
                  placeholder='Enter Menu Order...'
                  value={categoryData.menuOrder}
                  onChange={handleInputChange}
                  required
                />
              </div>

              <div className="form-row">
                <label htmlFor="parentCategory">
                  Parent Category<span className="superscript">*</span>
                </label>
                <div className="custom-dropdown-wrapper">
                  <CustomDropdown
                    options={parentCatOpt}  // Passing the filtered categories as options
                    selectedOption={categoryData.parentCategory || ''}  // Use '' as default for selected option
                    handleOptionChange={handleParentCat}
                  />
                </div>
              </div>

              <div className="form-row">
                <label htmlFor="description">Description</label>
                <textarea
                  id="description"
                  name="description"
                  placeholder='Enter Product Description here...'
                  value={categoryData.description}
                  onChange={handleInputChange}
                />
              </div>

              <div className="form-row">
                <label htmlFor="displayType">Display Type<span className='superscript'>*</span></label>
                <div className="custom-dropdown-wrapper">
                  <CustomDropdown
                    options={displayTypeOptions}
                    selectedOption={categoryData.displayType}
                    handleOptionChange={handleDisplayType}
                  />
                </div>
              </div>

              <div className="form-row">
                <label htmlFor="thumbnailImage">Thumbnail Image</label>
                <div className="banner-upload">
                  <label htmlFor="thumbnailImage" className="upload-label">
                    <div className="upload-button">
                      <img
                        src={uploadIcon}
                        alt=""
                        className="uploaded-image"
                        id="uploaded-image-1"
                      />
                    </div>
                    <span className="upload-text">Click to Upload Image</span>
                  </label>
                  <input
                    type="file"
                    id="thumbnailImage"
                    name="thumbnailImage"
                    className="upload-input"
                    accept="image/*"
                    onChange={handlethumbnailImageUpload}
                  />
                </div>
                {/* Optional: Display thumbnail image */}
                {thumbnailimage && <img src={thumbnailimage} alt="Thumbnail Image" className="image-preview" />}
              </div>

              <div className="form-row">
                <label htmlFor="bannerImage">Banner Image</label>
                <div className="banner-upload">
                  <label htmlFor="bannerImage" className="upload-label">
                    <div className="upload-button">
                      <img
                        src={uploadIcon}
                        alt=""
                        className="uploaded-image"
                        id="uploaded-image"
                      />
                    </div>
                    <span className="upload-text">Click to Upload Image</span>
                  </label>
                  <input
                    type="file"
                    id="bannerImage"
                    name="bannerImage"
                    className="upload-input"
                    accept="image/*"
                    onChange={handleImageUpload}
                  />
                </div>
                {/* Optional: Display banner image preview */}
                {imagePreview && <img src={imagePreview} alt="Image Preview" className="image-preview" />}
              </div>

              <div className="form-row">
                <label>Permalink</label>
                <div className='permaDisplay' title={`https://furnituremecca.zellesolutions.com${categoryData.permalink}`}>https://furnituremecca.zellesolutions.com{categoryData.permalink}</div>
              </div>

              <div className='SubmitBtn'>
                <CustomBtn
                  label="Add Category"
                  className="AddCatBtn"
                  onClick={handleAddCate}
                  type="button" // Ensure it's still a button to prevent default submission
                />
              </div>
            </form>
          </div>
        </div >
        <div className='Section2-Rightside'>
          <DataTable
            columns={columns}
            data={Array.isArray(data) ? data.slice((currentPage - 1) * rowsPerPage, currentPage * rowsPerPage) : []}
            pagination
            paginationComponent={() => (
              <CustomPagination
                rowsPerPage={rowsPerPage}
                rowCount={Array.isArray(data) ? data.length : 0}
                currentPage={currentPage}
                onChangePage={handlePageChange}
              />
            )}
            customStyles={customStyles}
          />
        </div>
      </div >

      {showConfirm && (
        <div style={styles.confirmationDialog}>
          <p>Are you sure you want to delete this item?</p>
          <button onClick={handleDelete}>Yes</button>
          <button onClick={cancelDelete}>No</button>
        </div>
      )}


    </div >
  );
};

// Styles for the confirmation dialog
const styles = {
  confirmationDialog: {
    position: 'fixed',
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)',
    padding: '20px',
    backgroundColor: 'white',
    boxShadow: '0 2px 10px rgba(0,0,0,0.1)',
    zIndex: 1000,
    borderRadius: '5px',
  },
};

export default ProductsCat;

-------------------------------------------------------------------------------------------------------------

Updated 04-10-2024 12:26pm
Before start working of ---> "SEO"

import React from 'react';
import axios from 'axios';
import { useState, useEffect } from 'react';
import './ECommerce.css';
import '../Page.css';
import CustomBtn from '../../Components/UI-Controls/Buttons/Btn';
import SearchBar from '../../Components/UI-Controls/SearchBar/Search';
import searchIcon from '../../Assets/Images/Search Bar 20 x 20.png';
import uploadIcon from '../../Assets/Images/UploadImg 24 x 24.png';
import DataTable from 'react-data-table-component';
import CustomPagination from '../../Components/UI-Controls/Pagination/Pagination';
import CustomDropdown from '../../Components/UI-Controls/Dropdown/dropdown';
import { AiOutlineEllipsis } from "react-icons/ai";
import { AiOutlineMore } from "react-icons/ai";
import defaultImage from "../../Assets/Images/defaultBannerImage 128 x 128.png";
import Loader from '../../Components/UI-Controls/Loader/Loader';

const ProductsCat = () => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [categoryData, setCategoryData] = useState({
    name: '',
    slug: '',
    parentCategory: '0',
    description: '',
    displayType: '',
    meun_order: '',
    permalink: '',
  });
  const [imagePreview, setImagePreview] = useState(null);
  const [thumbnailimage, setThumbnailImage] = useState(null);
  const [activeRowId, setActiveRowId] = useState(null);
  const [selectedRows, setSelectedRows] = useState([]);
  const [parentCatOpt, setParentCatOpt] = useState([]);
  const [showConfirm, setShowConfirm] = useState(false);
  const [currentRowId, setCurrentRowId] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [editingCategoryId, setEditingCategoryId] = useState(null);
  const rowsPerPage = 10;

  useEffect(() => {
    console.log('Fetching data...');
    fetchTableData();
  }, []);

  async function fetchTableData() {
    setLoading(true);
    const URL = 'https://fm.skyhub.pk/api/v1/productCategory/get';

    try {
      const response = await fetch(URL);
      const users = await response.json();
      console.log('The respective data is:', users);
      setLoading(false);

      // Reverse the categories and filter out categories with null or empty parent_name
      const reversedCategories = users.categories.reverse();
      const validParentCategories = reversedCategories
        .filter(cat => cat.name && cat.name.trim() !== '');

      // Map the filtered categories to an array of options
      const parentCatOptions = [
        { value: '', label: 'Select a parent category' }, // Empty option
        ...validParentCategories.map(cat => ({
          value: cat.uid,
          label: cat.name,
        })),
      ];

      // Set the options for the dropdown
      setParentCatOpt(parentCatOptions);
      setData(reversedCategories);  // In case you need the full dataset for other uses
      console.log(parentCatOptions);
    } catch (error) {
      setLoading(false);
      console.error('Error fetching data:', error);
    }
  }

  const handleSearch = () => console.log('Search has been triggered');

  const handlePageChange = (page) => {
    setCurrentPage(page);
  };

  const handleSelectAll = (isSelected) => {
    if (isSelected) {
      const allRowIds = data.map(row => row.uid);
      setSelectedRows(allRowIds);
    } else {
      setSelectedRows([]);
    }
  };

  const handleRowSelect = (rowId) => {
    setSelectedRows(prevSelected => {
      if (prevSelected.includes(rowId)) {
        return prevSelected.filter(id => id !== rowId);
      } else {
        return [...prevSelected, rowId];
      }
    });
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;

    if (name === 'name') {
      // Generate the slug and permalink from the name field input
      const generatedSlug = value
        .toLowerCase()
        .replace(/\s+/g, '-') // Replace spaces with hyphens
        .replace(/[^a-z0-9\-]/g, ''); // Remove any non-alphanumeric characters except hyphens

      // Update both name and slug together in one state update
      setCategoryData((prevState) => ({
        ...prevState,
        name: value, // Update name field
        slug: generatedSlug, // Auto-generate slug
        permalink: `/category/${generatedSlug}`, // Update permalink based on the new slug
      }));
    } else if (name === 'slug') {
      // Allow user to update the slug manually
      const formattedSlug = value
        .toLowerCase()
        .replace(/\s+/g, '-') // Replace spaces with hyphens
        .replace(/[^a-z0-9\-]/g, ''); // Remove any non-alphanumeric characters except hyphens

      setCategoryData((prevState) => ({
        ...prevState,
        slug: formattedSlug,
        permalink: `/category/${formattedSlug}`, // Update permalink based on manually entered slug
      }));
    } else {
      // Handle other fields as normal
      setCategoryData((prevState) => ({
        ...prevState,
        [name]: value,
      }));
    }
  };

  const handleImageUpload = (event) => {
    const file = event.target.files[0];
    const reader = new FileReader();
    reader.onload = () => {
      setImagePreview(reader.result);
    };
    if (file) {
      reader.readAsDataURL(file);
    }
  };

  const handlethumbnailImageUpload = (event) => {
    const file = event.target.files[0];
    const reader = new FileReader();
    reader.onload = () => {
      setThumbnailImage(reader.result);
    };
    if (file) {
      reader.readAsDataURL(file);
    }
  };

  const updateCategory = async (categoryId, categoryData) => {
    const formData = new FormData();
    formData.append('name', categoryData.name);
    formData.append('slug', categoryData.slug);
    formData.append('parent', categoryData.parentCategory || '0');
    formData.append('description', categoryData.description);
    formData.append('display', categoryData.displayType === "show" ? "1" : "0");
    formData.append('meun_order', categoryData.meun_order);

    // Include images if they exist
    if (categoryData.image) {
      formData.append('image', categoryData.image);
    }
    if (categoryData.bannerImage) {
      formData.append('bannerImage', categoryData.bannerImage);
    }

    try {
      const response = await axios.put(`https://fm.skyhub.pk/api/v1/productCategory/update/${categoryId}`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
      return response.data; // Return the response data if needed
    } catch (error) {
      console.error('Error updating category:', error);
      throw error; // Rethrow the error for further handling if necessary
    }
  };

  const handleAddCate = async () => {
    try {
      setLoading(true); // Start loading state

      if (isEditing) {
        // Handle update logic
        await updateCategory(editingCategoryId, categoryData); // Ensure this function handles the update correctly
        setIsEditing(false); // Reset to add mode after updating
      } else {
        // Generate slug and permalink as before
        let slugValue = categoryData.slug || categoryData.name
          .toLowerCase()
          .replace(/\s+/g, '-')
          .replace(/[^a-z0-9\-]/g, '');
        let permalinkValue = `/category/${slugValue}`;

        // Create a FormData object
        const formData = new FormData();
        formData.append('name', categoryData.name);
        formData.append('slug', slugValue);
        formData.append('parent', categoryData.parentCategory || '0');
        formData.append('description', categoryData.description);
        formData.append('display', categoryData.displayType === "show" ? "1" : "0");
        formData.append('meun_order', categoryData.meun_order);
        formData.append('permalink', permalinkValue);

        // Append images if available
        const thumbnailImageInput = document.getElementById('thumbnailImage');
        if (thumbnailImageInput.files[0]) {
          formData.append('image', thumbnailImageInput.files[0]);
        }
        const bannerImageInput = document.getElementById('bannerImage');
        if (bannerImageInput.files[0]) {
          formData.append('bannerImage', bannerImageInput.files[0]);
        }

        console.log('Form submission started with data:', categoryData);
        const response = await axios.post('https://fm.skyhub.pk/api/v1/productCategory/add', formData, {
          headers: { 'Content-Type': 'multipart/form-data' },
        });
        console.log('Form submission successful:', response.data);
      }

      resetForm(); // Ensure this function resets categoryData correctly
    } catch (error) {
      // Detailed error handling
      if (error.response) {
        console.error('Error submitting form:', {
          status: error.response.status,
          data: error.response.data,
          headers: error.response.headers,
        });
        alert(`Error: ${error.response.data.message || 'An error occurred. Please try again.'}`);
      } else if (error.request) {
        console.error('Error: No response received:', error.request);
        alert('Error: No response from server. Please check your connection and try again.');
      } else {
        console.error('Error:', error.message);
        alert('Error: ' + error.message);
      }
    } finally {
      setLoading(false); // End loading state
      console.log('Form submission ended.');
    }
  };

  const resetForm = () => {
    setCategoryData({
      name: '',
      slug: '',
      meun_order: '',
      parentCategory: '',
      description: '',
      displayType: '',
      thumbnailImage: '',
      bannerImage: '',
      permalink: '',
    });
    setIsEditing(false);
    setEditingCategoryId(null);
    setImagePreview(null); // Reset banner-image preview
    setThumbnailImage(null); // Reset thumbnail-image preview
    fetchTableData();
  };

  // const handleAddCate = async () => {
  //   // Use the slug from state, or generate a new one if the slug is empty
  //   let slugValue = categoryData.slug || categoryData.name
  //     .toLowerCase()
  //     .replace(/\s+/g, '-')        // Replace spaces with hyphens
  //     .replace(/[^a-z0-9\-]/g, ''); // Remove any non-alphanumeric characters except hyphens

  //   let permalinkValue = `/category/${slugValue}`;

  //   // Create a FormData object
  //   const formData = new FormData();

  //   // Append form data
  //   formData.append('name', categoryData.name);
  //   formData.append('slug', slugValue);  // Use the slug from state or the auto-generated slug

  //   // If parentCategory is empty, set it to '0'
  //   const parentCategoryValue = categoryData.parentCategory || '0';
  //   formData.append('parent', parentCategoryValue);

  //   formData.append('description', categoryData.description);

  //   // Conditionally set displayType based on the value of categoryData.displayType
  //   const displayValue = categoryData.displayType === "show" ? "1" : "0";
  //   formData.append('display', displayValue);

  //   formData.append('meun_order', categoryData.menuOrder);
  //   formData.append('permalink', permalinkValue);  // Use the updated permalink

  //   // Append thumbnail image file if exists
  //   const thumbnailImageInput = document.getElementById('thumbnailImage');
  //   if (thumbnailImageInput.files[0]) {
  //     formData.append('image', thumbnailImageInput.files[0]);
  //   }

  //   // Append banner image file if exists
  //   const bannerImageInput = document.getElementById('bannerImage');
  //   if (bannerImageInput.files[0]) {
  //     formData.append('bannerImage', bannerImageInput.files[0]);
  //   }

  //   try {
  //     setLoading(true); // Start loading state
  //     console.log('Form submission started with data:', categoryData);

  //     const response = await axios.post('https://fm.skyhub.pk/api/v1/productCategory/add', formData, {
  //       headers: {
  //         'Content-Type': 'multipart/form-data',
  //       },
  //     });

  //     // Handle successful response
  //     console.log('Form submission successful:', response.data);

  //     // Optionally reset the form or update the UI here
  //     setCategoryData({
  //       name: '',
  //       slug: '',
  //       parentCategory: '',
  //       description: '',
  //       displayType: '',
  //       menuOrder: '',
  //       permalink: '', // Reset permalink as well
  //     });
  //     setImagePreview(null); // Reset banner-image preview
  //     setThumbnailImage(null); // Reset thumbnail-image preview
  //     fetchTableData();
  //   } catch (error) {
  //     // Detailed error handling
  //     if (error.response) {
  //       console.error('Error submitting form:', {
  //         status: error.response.status,
  //         data: error.response.data,
  //         headers: error.response.headers,
  //       });
  //       alert(`Error: ${error.response.data.message || 'An error occurred. Please try again.'}`);
  //     } else if (error.request) {
  //       console.error('Error: No response received:', error.request);
  //       alert('Error: No response from server. Please check your connection and try again.');
  //     } else {
  //       console.error('Error:', error.message);
  //       alert('Error: ' + error.message);
  //     }
  //   } finally {
  //     setLoading(false); // End loading state
  //     console.log('Form submission ended.');
  //   }
  // };

  const customStyles = {
    headCells: {
      style: {
        height: '52px',
        borderRadius: '5px 5px 5px 5px',
        background: '#FDFDFD',
        opacity: '1',
        textAlign: 'center',
        justifyContent: 'center',
        border: 'none',
        color: 'var(--text-color)',
        fontFamily: 'poppins',
        fontWeight: '500',
        fontSize: '14px',
        overflow: 'wrap', // Prevents content overflow in headers
        textOverflow: 'ellipsis',
        whiteSpace: 'normal', // Allows wrapping in header cells
      },
    },
    cells: {
      style: {
        height: '66px',
        justifyContent: 'center',
        textAlign: 'center',
        background: '#FFFFFF',
        borderTop: '1px solid #F0F0F0',
        borderRight: 'none',
        color: '#858585',
        fontFamily: 'poppins',
        fontWeight: '400',
        fontSize: '12px',
        whiteSpace: 'normal', // Allows text to wrap in cells
        wordBreak: 'break-word', // Breaks long words if necessary
        overflow: 'wrap', // Prevents content overflow
        textOverflow: 'ellipsis', // Shows ellipsis for long content
      },
    },
  };

  // const handleSubmit = async (e) => {
  //   e.preventDefault();
  //   try {
  //     setLoading(true); // Start loading state

  //     const formData = new FormData();
  //     formData.append('name', categoryData.name);
  //     formData.append('slug', categoryData.slug);
  //     formData.append('parent', categoryData.parentCategory);
  //     formData.append('description', categoryData.description);
  //     formData.append('display', categoryData.displayType === 'Show' ? '1' : '0');
  //     formData.append('meun_order', categoryData.meun_order);
  //     formData.append('permalink', categoryData.permalink);

  //     // Append images if available
  //     const thumbnailInput = document.getElementById('thumbnailImage');
  //     if (thumbnailInput.files[0]) {
  //       formData.append('thumbnailImage', thumbnailInput.files[0]);
  //     }

  //     const bannerInput = document.getElementById('bannerImage');
  //     if (bannerInput.files[0]) {
  //       formData.append('bannerImage', bannerInput.files[0]);
  //     }

  //     if (isEditing) {
  //       await axios.put(`https://fm.skyhub.pk/api/v1/productCategory/${editingCategoryId}`, formData);
  //       alert('Category updated successfully.');
  //     } else {
  //       await axios.post('https://fm.skyhub.pk/api/v1/productCategory/add', formData);
  //       alert('Category added successfully.');
  //     }

  //     // Reset the form after submission
  //     resetForm();
  //   } catch (error) {
  //     console.error('Error submitting form:', error);
  //     alert('An error occurred. Please try again.');
  //   } finally {
  //     setLoading(false); // End loading state
  //   }
  // };

  const columns = [
    {
      name: (
        <input
          type="checkbox"
          style={{ margin: 0 }}
          onChange={(e) => handleSelectAll(e.target.checked)}
          checked={selectedRows.length === data.length && data.length > 0}
        />
      ),
      cell: (row) => (
        <input
          type="checkbox"
          style={{ margin: 0 }}
          onChange={() => handleRowSelect(row.uid)}
          checked={selectedRows.includes(row.uid)}
        />
      ),
      ignoreRowClick: true,
      allowOverflow: true,
      button: true,
      width: '50px',
    },
    {
      name: 'Image',
      cell: (row) => (
        <img
          src={row.image ? `http://fm.skyhub.pk${row.image}` : defaultImage}
          alt={row.name}
          width="auto"
          height="40px"
          style={{ objectFit: 'cover' }}
        />
      ),
      width: '100px',
    },
    {
      name: 'Name',
      selector: (row) => row.name,
      width: '120px',
    },
    {
      name: 'Description',
      selector: (row) => row.description,
      width: '150px',
    },
    {
      name: 'Slug',
      selector: (row) => row.slug,
      width: '100px',
    },
    {
      name: 'Count',
      selector: (row) => row.uid,
      width: '80px',
    },
    {
      name: 'Action',
      cell: (row) => {
        const isActive = activeRowId === row._id;

        return (
          <div style={{ position: 'relative' }}>
            <button
              style={{
                width: '30px',
                height: '30px',
                border: 'none',
                borderRadius: '5px',
                boxShadow: '0px 0px 8px 0px #0000001A',
                backgroundColor: 'transparent',
                cursor: 'pointer',
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
                padding: 0,
              }}
              onClick={() => {
                if (isActive) {
                  setActiveRowId(null);
                } else {
                  setActiveRowId(row._id);
                }
              }}
            >
              {isActive ? <AiOutlineMore /> : <AiOutlineEllipsis />} {/* Toggle icons */}
            </button>
            {isActive && ( // Render the dropdown only if active
              <div
                className="dropdown"
                style={{
                  position: 'absolute',
                  top: '30%',
                  left: '-685%',
                  transform: 'translateY(-5%)',
                  backgroundColor: 'white',
                  border: 'none',
                  zIndex: 1,
                  width: '184px',
                  height: '167px',
                  boxShadow: 'rgba(0, 0, 0, 0.16) 0px 1px 4px',
                  gap: 10,
                  fontFamily: 'poppins',
                  fontSize: 14,
                  fontWeight: 400,
                }}
              >
                <ul style={{ listStyleType: 'none', padding: '5px', margin: '10px' }}>
                  {/* <li
                    style={{ padding: '5px', cursor: 'pointer' }}
                    onClick={() => {
                      console.log('Edit clicked for:', row._id, 'Data:', row);
                    }}
                  >
                    Edit
                  </li> */}
                  <li
                    style={{ padding: '5px', cursor: 'pointer' }}
                    onClick={() => {
                      setIsEditing(true);
                      setEditingCategoryId(row._id);
                      // Populate the form with the data from the selected row
                      setCategoryData({
                        name: row.name || '',
                        slug: row.slug || '',
                        meun_order: row.meun_order || '', // Corrected spelling from meun_order to menuOrder
                        parentCategory: row.parent || '0',
                        description: row.description || '',
                        displayType: row.display === 1 ? 'Show' : 'Hide',
                        // thumbnailImage: row.image ? `http://fm.skyhub.pk${row.image}` : '',
                        // bannerImage:  row.bannerImage ? `http://fm.skyhub.pk${row.bannerImage}` : '',
                        thumbnailImage: row.thumbnailImage || '',
                        bannerImage: row.bannerImage || '',
                        permalink: row.permalink || '',
                      });
                      // Set the preview images based on the data
                      setThumbnailImage(row.thumbnailImage || ''); // Set preview for thumbnail
                      console.log(thumbnailimage);
                      setImagePreview(row.bannerImage || ''); // Set preview for banner
                      console.log(imagePreview);
                    }}
                  >
                    Edit
                  </li>

                  <li
                    style={{ padding: '5px', cursor: 'pointer' }}
                    onClick={() => {
                      console.log('Quick Edit clicked for:', row._id, 'Data:', row);
                    }}
                  >
                    Quick Edit
                  </li>
                  <li
                    style={{ padding: '5px', cursor: 'pointer' }}
                    onClick={() => confirmDelete(row._id)}
                  >
                    Delete
                  </li>
                  <li
                    style={{ padding: '5px', cursor: 'pointer' }}
                    onClick={() => {
                      console.log('View clicked for:', row._id, 'Data:', row);
                    }}
                  >
                    View
                  </li>
                  <li
                    style={{ padding: '5px', cursor: 'pointer' }}
                    onClick={() => {
                      console.log('Duplicate clicked for:', row._id, 'Data:', row);
                    }}
                  >
                    Duplicate
                  </li>
                </ul>
              </div>
            )}
          </div>
        );
      },
      width: '85px',
    }
  ];

  // Options for the Display Type Dropdown
  const displayTypeOptions = [
    { value: 'Show', label: 'Show' },
    { value: 'Hide', label: 'Hide' },
  ];

  // Handler for dropdown change
  const handleParentCat = (selectedValue) => {
    setCategoryData((prevState) => ({
      ...prevState,
      parentCategory: selectedValue,  // Update the state with selected value
    }));
  };

  // Handler for dropdown change
  const handleDisplayType = (selectedValue) => {
    setCategoryData((prevState) => ({
      ...prevState,
      displayType: selectedValue,  // Update the state with selected value
    }));
  };

  const confirmDelete = (id) => {
    setCurrentRowId(id); // Set the ID of the item to delete
    setShowConfirm(true); // Show confirmation dialog
  };

  const handleDelete = () => {
    console.log(`Deleting item with ID: ${currentRowId}`); // Log the ID before deletion
    if (currentRowId) {
      deleteItem(currentRowId);
      setShowConfirm(false); // Close the confirmation dialog
    }
  };

  const deleteItem = async (id) => {
    try {
      console.log(`Attempting to delete item with ID: ${id}`); // Log the ID
      const response = await fetch(`https://fm.skyhub.pk/api/v1/productCategory/${id}`, {
        method: 'DELETE',
      });

      if (!response.ok) {
        throw new Error('Network response was not ok');
      }

      const responseData = await response.json(); // Check response data if needed
      console.log(`Delete response: `, responseData);

      console.log(`Item with ID ${id} deleted successfully.`);

      // Update local state to remove the deleted item
      setData((prevItems) => prevItems.filter(item => item._id !== id));

    } catch (error) {
      console.error('Error deleting item:', error);
      alert('Failed to delete the item. Please try again.');
    }
  };

  const cancelDelete = () => {
    setShowConfirm(false); // Close the confirmation dialog
  };

  return (
    <div className="ProductCatPage">
      <div className="CatSection-01">
        <span className='Section1-Leftside'>
          Categories
        </span>
        <div className='Section1-Rightside'>
          <SearchBar onSearch={handleSearch} icon={searchIcon} placeholder="Search category by name" />
        </div>
      </div>

      <div className="CatSection-02">
        <div className='Section2-Leftside'>
          <div className='Header'>{isEditing ? "Edit Category" : "Add New Category"}</div>
          <div className="NewCat-Add">
            {loading && (
              <div className="backdrop">
                <Loader />
              </div>
            )}
            <form onSubmit={(e) => { e.preventDefault(); handleAddCate(); }}>
              <div className="form-row">
                <label htmlFor="name">Name<span className='superscript'>*</span></label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  placeholder="Enter Category Name..."
                  value={categoryData.name}
                  onChange={handleInputChange}
                  required // Optional: Add if field is mandatory
                />
              </div>

              <div className="form-row">
                <label htmlFor="slug">Slug<span className='superscript'>*</span></label>
                <input
                  type="text"
                  id="slug"
                  name="slug"
                  placeholder="Enter Slug..."
                  value={categoryData.slug}
                  onChange={handleInputChange}
                  required
                />
              </div>

              <div className="form-row">
                <label htmlFor="meun_order">Menu Order<span className='superscript'>*</span></label>
                <input
                  type="number" // Change to number for validation
                  id="meun_order"
                  name="meun_order"
                  placeholder='Enter Menu Order...'
                  value={categoryData.meun_order}
                  onChange={handleInputChange}
                  required
                />
              </div>

              <div className="form-row">
                <label htmlFor="parentCategory">
                  Parent Category<span className="superscript">*</span>
                </label>
                <div className="custom-dropdown-wrapper">
                  <CustomDropdown
                    options={parentCatOpt}  // Passing the filtered categories as options
                    selectedOption={categoryData.parentCategory || ''}  // Use '' as default for selected option
                    handleOptionChange={handleParentCat}
                  />
                </div>
              </div>

              <div className="form-row">
                <label htmlFor="description">Description</label>
                <textarea
                  id="description"
                  name="description"
                  placeholder='Enter Product Description here...'
                  value={categoryData.description}
                  onChange={handleInputChange}
                />
              </div>

              <div className="form-row">
                <label htmlFor="displayType">Display Type<span className='superscript'>*</span></label>
                <div className="custom-dropdown-wrapper">
                  <CustomDropdown
                    options={displayTypeOptions}
                    selectedOption={categoryData.displayType}
                    handleOptionChange={handleDisplayType}
                  />
                </div>
              </div>

              <div className="form-row">
                <label htmlFor="thumbnailImage">Thumbnail Image</label>
                <div className="banner-upload">
                  <label htmlFor="thumbnailImage" className="upload-label">
                    <div className="Catupload-button">
                      <img
                        src={uploadIcon}
                        alt=""
                        className="uploaded-image"
                        id="uploaded-image-1"
                      />
                    </div>
                    <span className="upload-text">Click to Upload Image</span>
                  </label>
                  <input
                    type="file"
                    id="thumbnailImage"
                    name="thumbnailImage"
                    className="upload-input"
                    accept="image/*"
                    onChange={handlethumbnailImageUpload}
                  />
                </div>
                {/* Optional: Display thumbnail image */}
                {thumbnailimage && <img src={thumbnailimage} alt="Thumbnail Image" className="image-preview" />}
              </div>

              <div className="form-row">
                <label htmlFor="bannerImage">Banner Image</label>
                <div className="banner-upload">
                  <label htmlFor="bannerImage" className="upload-label">
                    <div className="Catupload-button">
                      <img
                        src={uploadIcon}
                        alt=""
                        className="uploaded-image"
                        id="uploaded-image"
                      />
                    </div>
                    <span className="upload-text">Click to Upload Image</span>
                  </label>
                  <input
                    type="file"
                    id="bannerImage"
                    name="bannerImage"
                    className="upload-input"
                    accept="image/*"
                    onChange={handleImageUpload}
                  />
                </div>
                {/* Optional: Display banner image preview */}
                {imagePreview && <img src={imagePreview} alt="Image Preview" className="image-preview" />}
              </div>

              <div className="form-row">
                <label>Permalink</label>
                <div className='permaDisplay' title={`https://furnituremecca.zellesolutions.com${categoryData.permalink}`}>https://furnituremecca.zellesolutions.com{categoryData.permalink}</div>
              </div>

              <div className='SubmitBtn'>
                <CustomBtn
                  // label="Add Category"
                  label={isEditing ? "Update Category" : "Add Category"}
                  className="AddCatBtn"
                  onClick={handleAddCate}
                  type="button" // Ensure it's still a button to prevent default submission
                />
              </div>
            </form>
          </div>
        </div >
        <div className='Section2-Rightside'>
          <DataTable
            columns={columns}
            data={Array.isArray(data) ? data.slice((currentPage - 1) * rowsPerPage, currentPage * rowsPerPage) : []}
            pagination
            paginationComponent={() => (
              <CustomPagination
                rowsPerPage={rowsPerPage}
                rowCount={Array.isArray(data) ? data.length : 0}
                currentPage={currentPage}
                onChangePage={handlePageChange}
              />
            )}
            customStyles={customStyles}
          />
        </div>
      </div >

      {showConfirm && (
        <div style={styles.confirmationDialog}>
          <p>Are you sure you want to delete this item?</p>
          <button onClick={handleDelete}>Yes</button>
          <button onClick={cancelDelete}>No</button>
        </div>
      )}


    </div >
  );
};

// Styles for the confirmation dialog
const styles = {
  confirmationDialog: {
    position: 'fixed',
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)',
    padding: '20px',
    backgroundColor: 'white',
    boxShadow: '0 2px 10px rgba(0,0,0,0.1)',
    zIndex: 1000,
    borderRadius: '5px',
  },
};

export default ProductsCat;

---------------------------------------------------------------------------------------------------------

Updated ProductCat Component 05-10-2024 Time: 6:08pm
After Completing UI-Work of SEO and Social & Before Start Working on Edit Functionality.

import React from 'react';
import axios from 'axios';
import { useState, useEffect } from 'react';
import './ECommerce.css';
import '../Page.css';
import CustomBtn from '../../Components/UI-Controls/Buttons/Btn';
import SearchBar from '../../Components/UI-Controls/SearchBar/Search';
import searchIcon from '../../Assets/Images/Search Bar 20 x 20.png';
import uploadIcon from '../../Assets/Images/UploadImg 24 x 24.png';
import DataTable from 'react-data-table-component';
import CustomPagination from '../../Components/UI-Controls/Pagination/Pagination';
import CustomDropdown from '../../Components/UI-Controls/Dropdown/dropdown';
import { AiOutlineEllipsis } from "react-icons/ai";
import { AiOutlineMore } from "react-icons/ai";
import defaultImage from "../../Assets/Images/defaultBannerImage 128 x 128.png";
import Loader from '../../Components/UI-Controls/Loader/Loader';
import TabBarView from '../../Components/UI-Controls/TabView/ProductCatTab'; // Import your TabBarView component

const ProductsCat = () => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [categoryData, setCategoryData] = useState({
    name: '',
    slug: '',
    parentCategory: '0',
    description: '',
    displayType: '',
    meun_order: '',
    permalink: '',
  });
  const [imagePreview, setImagePreview] = useState(null);
  const [thumbnailimage, setThumbnailImage] = useState(null);
  const [mobileimagePreview, setMobileImagePreview] = useState(null);
  const [mobilethumbnailimage, setMobileThumbnailImage] = useState(null);
  const [activeRowId, setActiveRowId] = useState(null);
  const [selectedRows, setSelectedRows] = useState([]);
  const [parentCatOpt, setParentCatOpt] = useState([]);
  const [showConfirm, setShowConfirm] = useState(false);
  const [currentRowId, setCurrentRowId] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [editingCategoryId, setEditingCategoryId] = useState(null);
  const rowsPerPage = 10;

  useEffect(() => {
    console.log('Fetching data...');
    fetchTableData();
  }, []);

  async function fetchTableData() {
    setLoading(true);
    const URL = 'https://fm.skyhub.pk/api/v1/productCategory/get';

    try {
      const response = await fetch(URL);
      const users = await response.json();
      console.log('The respective data is:', users);
      setLoading(false);

      // Reverse the categories and filter out categories with null or empty parent_name
      const reversedCategories = users.categories.reverse();
      const validParentCategories = reversedCategories
        .filter(cat => cat.name && cat.name.trim() !== '');

      // Map the filtered categories to an array of options
      const parentCatOptions = [
        { value: '', label: 'Select a parent category' }, // Empty option
        ...validParentCategories.map(cat => ({
          value: cat.uid,
          label: cat.name,
        })),
      ];

      // Set the options for the dropdown
      setParentCatOpt(parentCatOptions);
      setData(reversedCategories);  // In case you need the full dataset for other uses
      console.log(parentCatOptions);
    } catch (error) {
      setLoading(false);
      console.error('Error fetching data:', error);
    }
  }

  const handleSearch = () => console.log('Search has been triggered');

  const handlePageChange = (page) => {
    setCurrentPage(page);
  };

  const handleSelectAll = (isSelected) => {
    if (isSelected) {
      const allRowIds = data.map(row => row.uid);
      setSelectedRows(allRowIds);
    } else {
      setSelectedRows([]);
    }
  };

  const handleRowSelect = (rowId) => {
    setSelectedRows(prevSelected => {
      if (prevSelected.includes(rowId)) {
        return prevSelected.filter(id => id !== rowId);
      } else {
        return [...prevSelected, rowId];
      }
    });
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;

    if (name === 'name') {
      // Generate the slug and permalink from the name field input
      const generatedSlug = value
        .toLowerCase()
        .replace(/\s+/g, '-') // Replace spaces with hyphens
        .replace(/[^a-z0-9\-]/g, ''); // Remove any non-alphanumeric characters except hyphens

      // Update both name and slug together in one state update
      setCategoryData((prevState) => ({
        ...prevState,
        name: value, // Update name field
        slug: generatedSlug, // Auto-generate slug
        permalink: `/category/${generatedSlug}`, // Update permalink based on the new slug
      }));
    } else if (name === 'slug') {
      // Allow user to update the slug manually
      const formattedSlug = value
        .toLowerCase()
        .replace(/\s+/g, '-') // Replace spaces with hyphens
        .replace(/[^a-z0-9\-]/g, ''); // Remove any non-alphanumeric characters except hyphens

      setCategoryData((prevState) => ({
        ...prevState,
        slug: formattedSlug,
        permalink: `/category/${formattedSlug}`, // Update permalink based on manually entered slug
      }));
    } else {
      // Handle other fields as normal
      setCategoryData((prevState) => ({
        ...prevState,
        [name]: value,
      }));
    }
  };

  const handleImageUpload = (event) => {
    const file = event.target.files[0];
    const reader = new FileReader();
    reader.onload = () => {
      setImagePreview(reader.result);
    };
    if (file) {
      reader.readAsDataURL(file);
    }
  };

  const handlemobileImageUpload = (event) => {
    const file = event.target.files[0];
    const reader = new FileReader();
    reader.onload = () => {
      setMobileImagePreview(reader.result);
    };
    if (file) {
      reader.readAsDataURL(file);
    }
  };

  const handlethumbnailImageUpload = (event) => {
    const file = event.target.files[0];
    const reader = new FileReader();
    reader.onload = () => {
      setThumbnailImage(reader.result);
    };
    if (file) {
      reader.readAsDataURL(file);
    }
  };

  const handlemobilethumbnailImageUpload = (event) => {
    const file = event.target.files[0];
    const reader = new FileReader();
    reader.onload = () => {
      setMobileThumbnailImage(reader.result);
    };
    if (file) {
      reader.readAsDataURL(file);
    }
  };

  const updateCategory = async (categoryId, categoryData) => {
    const formData = new FormData();
    formData.append('name', categoryData.name);
    formData.append('slug', categoryData.slug);
    formData.append('parent', categoryData.parentCategory || '0');
    formData.append('description', categoryData.description);
    formData.append('display', categoryData.displayType === "show" ? "1" : "0");
    formData.append('meun_order', categoryData.meun_order);

    // Include images if they exist
    if (categoryData.image) {
      formData.append('image', categoryData.image);
    }
    if (categoryData.bannerImage) {
      formData.append('bannerImage', categoryData.bannerImage);
    }

    try {
      const response = await axios.put(`https://fm.skyhub.pk/api/v1/productCategory/update/${categoryId}`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
      return response.data; // Return the response data if needed
    } catch (error) {
      console.error('Error updating category:', error);
      throw error; // Rethrow the error for further handling if necessary
    }
  };

  const handleAddCate = async () => {
    try {
      setLoading(true); // Start loading state

      if (isEditing) {
        // Handle update logic
        await updateCategory(editingCategoryId, categoryData); // Ensure this function handles the update correctly
        setIsEditing(false); // Reset to add mode after updating
      } else {
        // Generate slug and permalink as before
        let slugValue = categoryData.slug || categoryData.name
          .toLowerCase()
          .replace(/\s+/g, '-')
          .replace(/[^a-z0-9\-]/g, '');
        let permalinkValue = `/category/${slugValue}`;

        // Create a FormData object
        const formData = new FormData();
        formData.append('name', categoryData.name);
        formData.append('slug', slugValue);
        formData.append('parent', categoryData.parentCategory || '0');
        formData.append('description', categoryData.description);
        formData.append('display', categoryData.displayType === "show" ? "1" : "0");
        formData.append('meun_order', categoryData.meun_order);
        formData.append('permalink', permalinkValue);

        // Append images if available
        const thumbnailImageInput = document.getElementById('thumbnailImage');
        if (thumbnailImageInput.files[0]) {
          formData.append('image', thumbnailImageInput.files[0]);
        }
        const bannerImageInput = document.getElementById('bannerImage');
        if (bannerImageInput.files[0]) {
          formData.append('bannerImage', bannerImageInput.files[0]);
        }

        console.log('Form submission started with data:', categoryData);
        const response = await axios.post('https://fm.skyhub.pk/api/v1/productCategory/add', formData, {
          headers: { 'Content-Type': 'multipart/form-data' },
        });
        console.log('Form submission successful:', response.data);
      }

      resetForm(); // Ensure this function resets categoryData correctly
    } catch (error) {
      // Detailed error handling
      if (error.response) {
        console.error('Error submitting form:', {
          status: error.response.status,
          data: error.response.data,
          headers: error.response.headers,
        });
        alert(`Error: ${error.response.data.message || 'An error occurred. Please try again.'}`);
      } else if (error.request) {
        console.error('Error: No response received:', error.request);
        alert('Error: No response from server. Please check your connection and try again.');
      } else {
        console.error('Error:', error.message);
        alert('Error: ' + error.message);
      }
    } finally {
      setLoading(false); // End loading state
      console.log('Form submission ended.');
    }
  };

  const resetForm = () => {
    setCategoryData({
      name: '',
      slug: '',
      meun_order: '',
      parentCategory: '',
      description: '',
      displayType: '',
      thumbnailImage: '',
      bannerImage: '',
      permalink: '',
    });
    setIsEditing(false);
    setEditingCategoryId(null);
    setImagePreview(null); // Reset banner-image preview
    setThumbnailImage(null); // Reset thumbnail-image preview
    setMobileImagePreview(null);
    setMobileThumbnailImage(null);
    fetchTableData();
  };

  // const handleAddCate = async () => {
  //   // Use the slug from state, or generate a new one if the slug is empty
  //   let slugValue = categoryData.slug || categoryData.name
  //     .toLowerCase()
  //     .replace(/\s+/g, '-')        // Replace spaces with hyphens
  //     .replace(/[^a-z0-9\-]/g, ''); // Remove any non-alphanumeric characters except hyphens

  //   let permalinkValue = `/category/${slugValue}`;

  //   // Create a FormData object
  //   const formData = new FormData();

  //   // Append form data
  //   formData.append('name', categoryData.name);
  //   formData.append('slug', slugValue);  // Use the slug from state or the auto-generated slug

  //   // If parentCategory is empty, set it to '0'
  //   const parentCategoryValue = categoryData.parentCategory || '0';
  //   formData.append('parent', parentCategoryValue);

  //   formData.append('description', categoryData.description);

  //   // Conditionally set displayType based on the value of categoryData.displayType
  //   const displayValue = categoryData.displayType === "show" ? "1" : "0";
  //   formData.append('display', displayValue);

  //   formData.append('meun_order', categoryData.menuOrder);
  //   formData.append('permalink', permalinkValue);  // Use the updated permalink

  //   // Append thumbnail image file if exists
  //   const thumbnailImageInput = document.getElementById('thumbnailImage');
  //   if (thumbnailImageInput.files[0]) {
  //     formData.append('image', thumbnailImageInput.files[0]);
  //   }

  //   // Append banner image file if exists
  //   const bannerImageInput = document.getElementById('bannerImage');
  //   if (bannerImageInput.files[0]) {
  //     formData.append('bannerImage', bannerImageInput.files[0]);
  //   }

  //   try {
  //     setLoading(true); // Start loading state
  //     console.log('Form submission started with data:', categoryData);

  //     const response = await axios.post('https://fm.skyhub.pk/api/v1/productCategory/add', formData, {
  //       headers: {
  //         'Content-Type': 'multipart/form-data',
  //       },
  //     });

  //     // Handle successful response
  //     console.log('Form submission successful:', response.data);

  //     // Optionally reset the form or update the UI here
  //     setCategoryData({
  //       name: '',
  //       slug: '',
  //       parentCategory: '',
  //       description: '',
  //       displayType: '',
  //       menuOrder: '',
  //       permalink: '', // Reset permalink as well
  //     });
  //     setImagePreview(null); // Reset banner-image preview
  //     setThumbnailImage(null); // Reset thumbnail-image preview
  //     fetchTableData();
  //   } catch (error) {
  //     // Detailed error handling
  //     if (error.response) {
  //       console.error('Error submitting form:', {
  //         status: error.response.status,
  //         data: error.response.data,
  //         headers: error.response.headers,
  //       });
  //       alert(`Error: ${error.response.data.message || 'An error occurred. Please try again.'}`);
  //     } else if (error.request) {
  //       console.error('Error: No response received:', error.request);
  //       alert('Error: No response from server. Please check your connection and try again.');
  //     } else {
  //       console.error('Error:', error.message);
  //       alert('Error: ' + error.message);
  //     }
  //   } finally {
  //     setLoading(false); // End loading state
  //     console.log('Form submission ended.');
  //   }
  // };

  const customStyles = {
    headCells: {
      style: {
        height: '52px',
        borderRadius: '5px 5px 5px 5px',
        background: '#FDFDFD',
        opacity: '1',
        textAlign: 'center',
        justifyContent: 'center',
        border: 'none',
        color: 'var(--text-color)',
        fontFamily: 'poppins',
        fontWeight: '500',
        fontSize: '14px',
        overflow: 'wrap', // Prevents content overflow in headers
        textOverflow: 'ellipsis',
        whiteSpace: 'normal', // Allows wrapping in header cells
      },
    },
    cells: {
      style: {
        height: '66px',
        justifyContent: 'center',
        textAlign: 'center',
        background: '#FFFFFF',
        borderTop: '1px solid #F0F0F0',
        borderRight: 'none',
        color: '#858585',
        fontFamily: 'poppins',
        fontWeight: '400',
        fontSize: '12px',
        whiteSpace: 'normal', // Allows text to wrap in cells
        wordBreak: 'break-word', // Breaks long words if necessary
        overflow: 'wrap', // Prevents content overflow
        textOverflow: 'ellipsis', // Shows ellipsis for long content
      },
    },
  };

  // const handleSubmit = async (e) => {
  //   e.preventDefault();
  //   try {
  //     setLoading(true); // Start loading state

  //     const formData = new FormData();
  //     formData.append('name', categoryData.name);
  //     formData.append('slug', categoryData.slug);
  //     formData.append('parent', categoryData.parentCategory);
  //     formData.append('description', categoryData.description);
  //     formData.append('display', categoryData.displayType === 'Show' ? '1' : '0');
  //     formData.append('meun_order', categoryData.meun_order);
  //     formData.append('permalink', categoryData.permalink);

  //     // Append images if available
  //     const thumbnailInput = document.getElementById('thumbnailImage');
  //     if (thumbnailInput.files[0]) {
  //       formData.append('thumbnailImage', thumbnailInput.files[0]);
  //     }

  //     const bannerInput = document.getElementById('bannerImage');
  //     if (bannerInput.files[0]) {
  //       formData.append('bannerImage', bannerInput.files[0]);
  //     }

  //     if (isEditing) {
  //       await axios.put(`https://fm.skyhub.pk/api/v1/productCategory/${editingCategoryId}`, formData);
  //       alert('Category updated successfully.');
  //     } else {
  //       await axios.post('https://fm.skyhub.pk/api/v1/productCategory/add', formData);
  //       alert('Category added successfully.');
  //     }

  //     // Reset the form after submission
  //     resetForm();
  //   } catch (error) {
  //     console.error('Error submitting form:', error);
  //     alert('An error occurred. Please try again.');
  //   } finally {
  //     setLoading(false); // End loading state
  //   }
  // };

  const columns = [
    {
      name: (
        <input
          type="checkbox"
          style={{ margin: 0 }}
          onChange={(e) => handleSelectAll(e.target.checked)}
          checked={selectedRows.length === data.length && data.length > 0}
        />
      ),
      cell: (row) => (
        <input
          type="checkbox"
          style={{ margin: 0 }}
          onChange={() => handleRowSelect(row.uid)}
          checked={selectedRows.includes(row.uid)}
        />
      ),
      ignoreRowClick: true,
      allowOverflow: true,
      button: true,
      width: '50px',
    },
    {
      name: 'Image',
      cell: (row) => (
        <img
          src={row.image ? `http://fm.skyhub.pk${row.image}` : defaultImage}
          alt={row.name}
          width="auto"
          height="40px"
          style={{ objectFit: 'cover' }}
        />
      ),
      width: '100px',
    },
    {
      name: 'Name',
      selector: (row) => row.name,
      width: '120px',
    },
    {
      name: 'Description',
      selector: (row) => row.description,
      width: '150px',
    },
    {
      name: 'Slug',
      selector: (row) => row.slug,
      width: '100px',
    },
    {
      name: 'Count',
      selector: (row) => row.uid,
      width: '80px',
    },
    {
      name: 'Action',
      cell: (row) => {
        const isActive = activeRowId === row._id;

        return (
          <div style={{ position: 'relative' }}>
            <button
              style={{
                width: '30px',
                height: '30px',
                border: 'none',
                borderRadius: '5px',
                boxShadow: '0px 0px 8px 0px #0000001A',
                backgroundColor: 'transparent',
                cursor: 'pointer',
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
                padding: 0,
              }}
              onClick={() => {
                if (isActive) {
                  setActiveRowId(null);
                } else {
                  setActiveRowId(row._id);
                }
              }}
            >
              {isActive ? <AiOutlineMore /> : <AiOutlineEllipsis />} {/* Toggle icons */}
            </button>
            {isActive && ( // Render the dropdown only if active
              <div
                className="dropdown"
                style={{
                  position: 'absolute',
                  top: '30%',
                  left: '-685%',
                  transform: 'translateY(-5%)',
                  backgroundColor: 'white',
                  border: 'none',
                  zIndex: 1,
                  width: '184px',
                  height: '167px',
                  boxShadow: 'rgba(0, 0, 0, 0.16) 0px 1px 4px',
                  gap: 10,
                  fontFamily: 'poppins',
                  fontSize: 14,
                  fontWeight: 400,
                }}
              >
                <ul style={{ listStyleType: 'none', padding: '5px', margin: '10px' }}>
                  {/* <li
                    style={{ padding: '5px', cursor: 'pointer' }}
                    onClick={() => {
                      console.log('Edit clicked for:', row._id, 'Data:', row);
                    }}
                  >
                    Edit
                  </li> */}
                  <li
                    style={{ padding: '5px', cursor: 'pointer' }}
                    onClick={() => {
                      setIsEditing(true);
                      setEditingCategoryId(row._id);
                      // Populate the form with the data from the selected row
                      setCategoryData({
                        name: row.name || '',
                        slug: row.slug || '',
                        meun_order: row.meun_order || '', // Corrected spelling from meun_order to menuOrder
                        parentCategory: row.parent || '0',
                        description: row.description || '',
                        displayType: row.display === 1 ? 'Show' : 'Hide',
                        // thumbnailImage: row.image ? `http://fm.skyhub.pk${row.image}` : '',
                        // bannerImage:  row.bannerImage ? `http://fm.skyhub.pk${row.bannerImage}` : '',
                        thumbnailImage: row.thumbnailImage || '',
                        bannerImage: row.bannerImage || '',
                        permalink: row.permalink || '',
                      });
                      // Set the preview images based on the data
                      setThumbnailImage(row.thumbnailImage || ''); // Set preview for thumbnail
                      console.log(thumbnailimage);
                      setImagePreview(row.bannerImage || ''); // Set preview for banner
                      console.log(imagePreview);
                    }}
                  >
                    Edit
                  </li>

                  <li
                    style={{ padding: '5px', cursor: 'pointer' }}
                    onClick={() => {
                      console.log('Quick Edit clicked for:', row._id, 'Data:', row);
                    }}
                  >
                    Quick Edit
                  </li>
                  <li
                    style={{ padding: '5px', cursor: 'pointer' }}
                    onClick={() => confirmDelete(row._id)}
                  >
                    Delete
                  </li>
                  <li
                    style={{ padding: '5px', cursor: 'pointer' }}
                    onClick={() => {
                      console.log('View clicked for:', row._id, 'Data:', row);
                    }}
                  >
                    View
                  </li>
                  <li
                    style={{ padding: '5px', cursor: 'pointer' }}
                    onClick={() => {
                      console.log('Duplicate clicked for:', row._id, 'Data:', row);
                    }}
                  >
                    Duplicate
                  </li>
                </ul>
              </div>
            )}
          </div>
        );
      },
      width: '85px',
    }
  ];

  const displayTypeOptions = [
    { value: 'Show', label: 'Show' },
    { value: 'Hide', label: 'Hide' },
  ];

  const handleParentCat = (selectedValue) => {
    setCategoryData((prevState) => ({
      ...prevState,
      parentCategory: selectedValue,  // Update the state with selected value
    }));
  };

  const handleDisplayType = (selectedValue) => {
    setCategoryData((prevState) => ({
      ...prevState,
      displayType: selectedValue,  // Update the state with selected value
    }));
  };

  const confirmDelete = (id) => {
    setCurrentRowId(id); // Set the ID of the item to delete
    setShowConfirm(true); // Show confirmation dialog
  };

  const handleDelete = () => {
    console.log(`Deleting item with ID: ${currentRowId}`); // Log the ID before deletion
    if (currentRowId) {
      deleteItem(currentRowId);
      setShowConfirm(false); // Close the confirmation dialog
    }
  };

  const deleteItem = async (id) => {
    try {
      console.log(`Attempting to delete item with ID: ${id}`); // Log the ID
      const response = await fetch(`https://fm.skyhub.pk/api/v1/productCategory/${id}`, {
        method: 'DELETE',
      });

      if (!response.ok) {
        throw new Error('Network response was not ok');
      }

      const responseData = await response.json(); // Check response data if needed
      console.log(`Delete response: `, responseData);

      console.log(`Item with ID ${id} deleted successfully.`);

      // Update local state to remove the deleted item
      setData((prevItems) => prevItems.filter(item => item._id !== id));

    } catch (error) {
      console.error('Error deleting item:', error);
      alert('Failed to delete the item. Please try again.');
    }
  };

  const cancelDelete = () => {
    setShowConfirm(false); // Close the confirmation dialog
  };

  return (
    <div className="ProductCatPage">
      <div className="CatSection-01">
        <span className='Section1-Leftside'>
          Categories
        </span>
        <div className='Section1-Rightside'>
          <SearchBar onSearch={handleSearch} icon={searchIcon} placeholder="Search category by name" />
        </div>
      </div>

      <div className="CatSection-02">
        <div className='Section2-Leftside'>
          <div className='Header'>{isEditing ? "Edit Category" : "Add New Category"}</div>
          <div className="NewCat-Add">
            {loading && (
              <div className="backdrop">
                <Loader />
              </div>
            )}
            <form onSubmit={(e) => { e.preventDefault(); handleAddCate(); }}>
              <div className="form-row">
                <label htmlFor="name">Name<span className='superscript'>*</span></label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  placeholder="Enter Category Name..."
                  value={categoryData.name}
                  onChange={handleInputChange}
                  required // Optional: Add if field is mandatory
                />
              </div>

              <div className="form-row">
                <label htmlFor="slug">Slug<span className='superscript'>*</span></label>
                <input
                  type="text"
                  id="slug"
                  name="slug"
                  placeholder="Enter Slug..."
                  value={categoryData.slug}
                  onChange={handleInputChange}
                  required
                />
              </div>

              <div className="form-row">
                <label htmlFor="meun_order">Menu Order<span className='superscript'>*</span></label>
                <input
                  type="number" // Change to number for validation
                  id="meun_order"
                  name="meun_order"
                  placeholder='Enter Menu Order...'
                  value={categoryData.meun_order}
                  onChange={handleInputChange}
                  required
                />
              </div>

              <div className="form-row">
                <label htmlFor="parentCategory">
                  Parent Category<span className="superscript">*</span>
                </label>
                <div className="custom-dropdown-wrapper">
                  <CustomDropdown
                    options={parentCatOpt}  // Passing the filtered categories as options
                    selectedOption={categoryData.parentCategory || ''}  // Use '' as default for selected option
                    handleOptionChange={handleParentCat}
                  />
                </div>
              </div>

              <div className="form-row">
                <label htmlFor="description">Description</label>
                <textarea
                  id="description"
                  name="description"
                  placeholder='Enter Product Description here...'
                  value={categoryData.description}
                  onChange={handleInputChange}
                />
              </div>

              <div className="form-row">
                <label htmlFor="displayType">Display Type<span className='superscript'>*</span></label>
                <div className="custom-dropdown-wrapper">
                  <CustomDropdown
                    options={displayTypeOptions}
                    selectedOption={categoryData.displayType}
                    handleOptionChange={handleDisplayType}
                  />
                </div>
              </div>

              <div className="form-row">
                <label htmlFor="thumbnailImage">Thumbnail Image</label>
                <div className="banner-upload">
                  <label htmlFor="thumbnailImage" className="upload-label">
                    <div className="Catupload-button">
                      <img
                        src={uploadIcon}
                        alt=""
                        className="uploaded-image"
                        id="uploaded-image-1"
                      />
                    </div>
                    <span className="upload-text">Click to Upload Image</span>
                  </label>
                  <input
                    type="file"
                    id="thumbnailImage"
                    name="thumbnailImage"
                    className="upload-input"
                    accept="image/*"
                    onChange={handlethumbnailImageUpload}
                  />
                </div>
                {/* Optional: Display thumbnail image */}
                {thumbnailimage && <img src={thumbnailimage} alt="Thumbnail Image" className="image-preview" />}
              </div>

              <div className="form-row">
                <label htmlFor="bannerImage">Banner Image</label>
                <div className="banner-upload">
                  <label htmlFor="bannerImage" className="upload-label">
                    <div className="Catupload-button">
                      <img
                        src={uploadIcon}
                        alt=""
                        className="uploaded-image"
                        id="uploaded-image"
                      />
                    </div>
                    <span className="upload-text">Click to Upload Image</span>
                  </label>
                  <input
                    type="file"
                    id="bannerImage"
                    name="bannerImage"
                    className="upload-input"
                    accept="image/*"
                    onChange={handleImageUpload}
                  />
                </div>
                {/* Optional: Display banner image preview */}
                {imagePreview && <img src={imagePreview} alt="Image Preview" className="image-preview" />}
              </div>

              <div className="form-row">
                <label htmlFor="mobilethumbnailImage">Mobile Thumbnail Image</label>
                <div className="banner-upload">
                  <label htmlFor="mobilethumbnailImage" className="upload-label">
                    <div className="Catupload-button">
                      <img
                        src={uploadIcon}
                        alt=""
                        className="uploaded-image"
                        id="uploaded-image-2"
                      />
                    </div>
                    <span className="upload-text">Click to Upload Image</span>
                  </label>
                  <input
                    type="file"
                    id="mobilethumbnailImage"
                    name="mobilethumbnailImage"
                    className="upload-input"
                    accept="image/*"
                    onChange={handlemobilethumbnailImageUpload}
                  />
                </div>
                {/* Optional: Display thumbnail image */}
                {mobilethumbnailimage && <img src={mobilethumbnailimage} alt="Mobile Thumbnail Image" className="image-preview" />}
              </div>

              <div className="form-row">
                <label htmlFor="mobilebannerImage">Mobile Banner Image</label>
                <div className="banner-upload">
                  <label htmlFor="mobilebannerImage" className="upload-label">
                    <div className="Catupload-button">
                      <img
                        src={uploadIcon}
                        alt=""
                        className="uploaded-image"
                        id="uploaded-image-3"
                      />
                    </div>
                    <span className="upload-text">Click to Upload Image</span>
                  </label>
                  <input
                    type="file"
                    id="mobilebannerImage"
                    name="mobilebannerImage"
                    className="upload-input"
                    accept="image/*"
                    onChange={handlemobileImageUpload}
                  />
                </div>
                {/* Optional: Display banner image preview */}
                {mobileimagePreview && <img src={mobileimagePreview} alt="Mobile Image Preview" className="image-preview" />}
              </div>

              <div className="form-row">
                <label>Permalink</label>
                <div className='permaDisplay' title={`https://furnituremecca.zellesolutions.com${categoryData.permalink}`}>https://furnituremecca.zellesolutions.com{categoryData.permalink}</div>
              </div>

              <div className="form-row">
                <TabBarView />
              </div>

              <div className='SubmitBtn'>
                <CustomBtn
                  // label="Add Category"
                  label={isEditing ? "Update Category" : "Add Category"}
                  className="AddCatBtn"
                  onClick={handleAddCate}
                  type="button" // Ensure it's still a button to prevent default submission
                />
              </div>
            </form>
          </div>
        </div >
        <div className='Section2-Rightside'>
          <DataTable
            columns={columns}
            data={Array.isArray(data) ? data.slice((currentPage - 1) * rowsPerPage, currentPage * rowsPerPage) : []}
            pagination
            paginationComponent={() => (
              <CustomPagination
                rowsPerPage={rowsPerPage}
                rowCount={Array.isArray(data) ? data.length : 0}
                currentPage={currentPage}
                onChangePage={handlePageChange}
              />
            )}
            customStyles={customStyles}
          />
        </div>
      </div >

      {showConfirm && (
        <div style={styles.confirmationDialog}>
          <p>Are you sure you want to delete this item?</p>
          <button onClick={handleDelete}>Yes</button>
          <button onClick={cancelDelete}>No</button>
        </div>
      )}


    </div >
  );
};

// Styles for the confirmation dialog
const styles = {
  confirmationDialog: {
    position: 'fixed',
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)',
    padding: '20px',
    backgroundColor: 'white',
    boxShadow: '0 2px 10px rgba(0,0,0,0.1)',
    zIndex: 1000,
    borderRadius: '5px',
  },
};

export default ProductsCat;

--------------------------------------------------------------------------------------------------------------

Updated ProductCat Component 07-10-2024  Time: 12:00pm
After Completing Edit functionality with Images Handling with single handleInputChange function.

import React from 'react';
import axios from 'axios';
import { useState, useEffect } from 'react';
import './ECommerce.css';
import '../Page.css';
import CustomBtn from '../../Components/UI-Controls/Buttons/Btn';
import SearchBar from '../../Components/UI-Controls/SearchBar/Search';
import searchIcon from '../../Assets/Images/Search Bar 20 x 20.png';
import uploadIcon from '../../Assets/Images/UploadImg 24 x 24.png';
import DataTable from 'react-data-table-component';
import CustomPagination from '../../Components/UI-Controls/Pagination/Pagination';
import CustomDropdown from '../../Components/UI-Controls/Dropdown/dropdown';
import { AiOutlineEllipsis } from "react-icons/ai";
import { AiOutlineMore } from "react-icons/ai";
import defaultImage from "../../Assets/Images/defaultBannerImage 128 x 128.png";
import Loader from '../../Components/UI-Controls/Loader/Loader';
import TabBarView from '../../Components/UI-Controls/TabView/ProductCatTab'; // Import your TabBarView component

const ProductsCat = () => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [categoryData, setCategoryData] = useState({
    name: '',
    slug: '',
    parentCategory: '0',
    description: '',
    displayType: '',
    meun_order: '',
    permalink: '',
  });
  const [imagePreview, setImagePreview] = useState('');
  const [thumbnailimage, setThumbnailImage] = useState('');
  const [mobileimagePreview, setMobileImagePreview] = useState(null);
  const [mobilethumbnailimage, setMobileThumbnailImage] = useState(null);
  const [activeRowId, setActiveRowId] = useState(null);
  const [selectedRows, setSelectedRows] = useState([]);
  const [parentCatOpt, setParentCatOpt] = useState([]);
  const [showConfirm, setShowConfirm] = useState(false);
  const [currentRowId, setCurrentRowId] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [editingCategoryId, setEditingCategoryId] = useState(null);
  const rowsPerPage = 10;

  useEffect(() => {
    console.log('Fetching data...');
    fetchTableData();
  }, []);

  async function fetchTableData() {
    setLoading(true);
    const URL = 'https://fm.skyhub.pk/api/v1/productCategory/get';

    try {
      const response = await fetch(URL);
      const users = await response.json();
      console.log('The respective data is:', users);
      setLoading(false);

      // Reverse the categories and filter out categories with null or empty parent_name
      const reversedCategories = users.categories.reverse();
      const validParentCategories = reversedCategories
        .filter(cat => cat.name && cat.name.trim() !== '');

      // Map the filtered categories to an array of options
      const parentCatOptions = [
        { value: '', label: 'Select a parent category' }, // Empty option
        ...validParentCategories.map(cat => ({
          value: cat.uid,
          label: cat.name,
        })),
      ];

      // Set the options for the dropdown
      setParentCatOpt(parentCatOptions);
      setData(reversedCategories);  // In case you need the full dataset for other uses
      console.log(parentCatOptions);
    } catch (error) {
      setLoading(false);
      console.error('Error fetching data:', error);
    }
  }

  const handleSearch = () => console.log('Search has been triggered');

  const handlePageChange = (page) => {
    setCurrentPage(page);
  };

  const handleSelectAll = (isSelected) => {
    if (isSelected) {
      const allRowIds = data.map(row => row.uid);
      setSelectedRows(allRowIds);
    } else {
      setSelectedRows([]);
    }
  };

  const handleRowSelect = (rowId) => {
    setSelectedRows(prevSelected => {
      if (prevSelected.includes(rowId)) {
        return prevSelected.filter(id => id !== rowId);
      } else {
        return [...prevSelected, rowId];
      }
    });
  };

  // const handleInputChange = (e) => {
  //   const { name, value } = e.target;

  //   if (name === 'name') {
  //     // Generate the slug and permalink from the name field input
  //     const generatedSlug = value
  //       .toLowerCase()
  //       .replace(/\s+/g, '-') // Replace spaces with hyphens
  //       .replace(/[^a-z0-9\-]/g, ''); // Remove any non-alphanumeric characters except hyphens

  //     // Update both name and slug together in one state update
  //     setCategoryData((prevState) => ({
  //       ...prevState,
  //       name: value, // Update name field
  //       slug: generatedSlug, // Auto-generate slug
  //       permalink: `/category/${generatedSlug}`, // Update permalink based on the new slug
  //     }));
  //   } else if (name === 'slug') {
  //     // Allow user to update the slug manually
  //     const formattedSlug = value
  //       .toLowerCase()
  //       .replace(/\s+/g, '-') // Replace spaces with hyphens
  //       .replace(/[^a-z0-9\-]/g, ''); // Remove any non-alphanumeric characters except hyphens

  //     setCategoryData((prevState) => ({
  //       ...prevState,
  //       slug: formattedSlug,
  //       permalink: `/category/${formattedSlug}`, // Update permalink based on manually entered slug
  //     }));
  //   } else {
  //     // Handle other fields as normal
  //     setCategoryData((prevState) => ({
  //       ...prevState,
  //       [name]: value,
  //     }));
  //   }
  // };

  const handleInputChange = (e) => {
    const { name, value, files } = e.target;

    if (name === 'name') {
      // Handle slug and permalink generation from name
      const generatedSlug = value
        .toLowerCase()
        .replace(/\s+/g, '-') // Replace spaces with hyphens
        .replace(/[^a-z0-9\-]/g, ''); // Remove any non-alphanumeric characters except hyphens

      setCategoryData((prevState) => ({
        ...prevState,
        name: value,
        slug: generatedSlug,
        permalink: `/category/${generatedSlug}`,
      }));
    } else if (name === 'slug') {
      // Handle slug update manually
      const formattedSlug = value
        .toLowerCase()
        .replace(/\s+/g, '-') // Replace spaces with hyphens
        .replace(/[^a-z0-9\-]/g, ''); // Remove any non-alphanumeric characters except hyphens

      setCategoryData((prevState) => ({
        ...prevState,
        slug: formattedSlug,
        permalink: `/category/${formattedSlug}`,
      }));
    } else if (name === 'bannerImage' || name === 'thumbnailImage') {
      // Handle image upload for banner or thumbnail
      const file = files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = () => {
          if (name === 'bannerImage') {
            // Update the state for banner image preview and category data
            setImagePreview(reader.result);  // Update the image preview for banner
            setCategoryData((prevState) => ({
              ...prevState,
              bannerImage: file,  // Store the file itself for form submission
            }));
          } else if (name === 'thumbnailImage') {
            // Update the state for thumbnail image preview and category data
            setThumbnailImage(reader.result);  // Update the image preview for thumbnail
            setCategoryData((prevState) => ({
              ...prevState,
              thumbnailImage: file,  // Store the file itself for form submission
            }));
          }
        };
        reader.readAsDataURL(file);  // Read the file to generate a base64 string for preview
      }
    } else {
      // Handle other fields as normal
      setCategoryData((prevState) => ({
        ...prevState,
        [name]: value,
      }));
    }
  };


  // const handleImageUpload = (event) => {
  //   const file = event.target.files[0];
  //   const reader = new FileReader();
  //   reader.onload = () => {
  //     setImagePreview(reader.result);
  //   };
  //   if (file) {
  //     reader.readAsDataURL(file);
  //   }
  // };

  const handlemobileImageUpload = (event) => {
    const file = event.target.files[0];
    const reader = new FileReader();
    reader.onload = () => {
      setMobileImagePreview(reader.result);
    };
    if (file) {
      reader.readAsDataURL(file);
    }
  };

  // const handlethumbnailImageUpload = (event) => {
  //   const file = event.target.files[0];
  //   const reader = new FileReader();
  //   reader.onload = () => {
  //     setThumbnailImage(reader.result);
  //   };
  //   if (file) {
  //     reader.readAsDataURL(file);
  //   }
  // };

  // const handleImageUpload = (event) => {
  //   const file = event.target.files[0];
  //   if (file) {
  //     const reader = new FileReader();
  //     reader.onload = () => {
  //       setImagePreview(reader.result);
  //     };
  //     reader.readAsDataURL(file);
  //     console.log('Uploaded Banner Image:', file); // Log the file details
  //   }
  // };

  // const handlethumbnailImageUpload = (event) => {
  //   const file = event.target.files[0];
  //   if (file) {
  //     const reader = new FileReader();
  //     reader.onload = () => {
  //       setThumbnailImage(reader.result);
  //     };
  //     reader.readAsDataURL(file);
  //     console.log('Uploaded Thumbnail Image:', file); // Log the file details
  //   }
  // };

  const handlemobilethumbnailImageUpload = (event) => {
    const file = event.target.files[0];
    const reader = new FileReader();
    reader.onload = () => {
      setMobileThumbnailImage(reader.result);
    };
    if (file) {
      reader.readAsDataURL(file);
    }
  };

  const updateCategory = async (categoryId, categoryData) => {
    const formData = new FormData();
    formData.append('name', categoryData.name);
    formData.append('slug', categoryData.slug);
    formData.append('parent', categoryData.parentCategory || '0');
    formData.append('description', categoryData.description);
    formData.append('display', categoryData.displayType === "show" ? "1" : "0");
    formData.append('meun_order', categoryData.meun_order);

    // Include images if they exist
    if (categoryData.image) {
      formData.append('image', categoryData.image);
    }
    if (categoryData.bannerImage) {
      formData.append('bannerImage', categoryData.bannerImage);
    }

    try {
      const response = await axios.put(`https://fm.skyhub.pk/api/v1/productCategory/update/${categoryId}`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
      return response.data; // Return the response data if needed
    } catch (error) {
      console.error('Error updating category:', error);
      throw error; // Rethrow the error for further handling if necessary
    }
  };

  // Handle Form Submission and Updation Methods by using Helper Funcction....

  const handleAddCate = async () => {
    try {
      setLoading(true); // Start loading state

      if (isEditing) {
        await handleUpdateCategory(editingCategoryId);  // Call helper function for update logic
      } else {
        const slugValue = generateSlug(categoryData.name, categoryData.slug);
        const permalinkValue = generatePermalink(slugValue);
        const formData = prepareFormData(categoryData, slugValue, permalinkValue); // Prepare form data

        console.log('Form submission started with data:', categoryData);

        await submitCategory(formData);  // Call helper function to submit the form

        resetForm();  // Reset the form after successful submission
      }
    } catch (error) {
      handleFormError(error);  // Call helper function to handle errors
    } finally {
      setLoading(false);  // End loading state
      console.log('Form submission ended.');
    }
  };

  const handleUpdateCategory = async (editingCategoryId) => {
    try {
      if (!editingCategoryId) {
        console.error('No valid editingCategoryId provided for update');
        alert('Cannot update the category: Missing category ID.');
        return;
      }

      const slugValue = generateSlug(categoryData.name, categoryData.slug);
      const permalinkValue = generatePermalink(slugValue);

      // Prepare the form data for the update
      const formData = prepareFormData(categoryData, slugValue, permalinkValue); // Use the same helper function

      // Debug: Log FormData content
      for (let pair of formData.entries()) {
        console.log(`${pair[0]}: ${pair[1]}`);
      }

      // Debugging log
      console.log('Updating category with ID:', editingCategoryId);
      console.log('Updating category with data:', categoryData);

      // Make the API request to update the category
      const response = await axios.put(`https://fm.skyhub.pk/api/v1/productCategory/${editingCategoryId}`, formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
      });

      console.log('Category updated successfully:', response.data);

      // Reset the form after a successful update
      resetForm();
      setIsEditing(false);  // Exit the editing mode

    } catch (error) {
      handleFormError(error);  // Use your existing error handling logic
    }
  };

  const generateSlug = (name, customSlug) => {
    return customSlug || name
      .toLowerCase()
      .replace(/\s+/g, '-')       // Replace spaces with hyphens
      .replace(/[^a-z0-9\-]/g, '');  // Remove invalid characters
  };

  const generatePermalink = (slugValue) => {
    return `/category/${slugValue}`;
  };

  const prepareFormData = (data, slugValue, permalinkValue) => {
    const formData = new FormData();
    formData.append('name', data.name);
    formData.append('slug', slugValue);
    formData.append('parent', data.parentCategory || '0');
    formData.append('description', data.description);
    formData.append('display', data.displayType === "Show" ? "1" : "0");
    formData.append('meun_order', data.meun_order);
    formData.append('permalink', permalinkValue);

    const thumbnailImageInput = document.getElementById('thumbnailImage');
    if (thumbnailImageInput.files[0]) {
      formData.append('image', thumbnailImageInput.files[0]);
      console.log(thumbnailImageInput.files[0], "thi is")
    }

    const bannerImageInput = document.getElementById('bannerImage');
    if (bannerImageInput.files[0]) {
      formData.append('bannerImage', bannerImageInput.files[0]);
    }


    return formData;  // Return the prepared formData
  };

  // const prepareFormData = (data, slugValue, permalinkValue) => {
  //   const formData = new FormData();
  //   formData.append('name', data.name);
  //   formData.append('slug', slugValue);
  //   formData.append('parent', data.parentCategory || '0');
  //   formData.append('description', data.description);
  //   formData.append('display', data.displayType === "Show" ? "1" : "0");
  //   formData.append('meun_order', data.meun_order);
  //   formData.append('permalink', permalinkValue);

  //   // Check if thumbnailImage is a File object, and append only if it's a new file
  //   if (data.thumbnailImage instanceof File) {
  //     formData.append('image', data.thumbnailImage);
  //   }

  //   // Check if bannerImage is a File object, and append only if it's a new file
  //   if (data.bannerImage instanceof File) {
  //     formData.append('bannerImage', data.bannerImage);
  //   }

  //   return formData;  // Return the prepared formData
  // };  

  const submitCategory = async (formData) => {
    try {
      const response = await axios.post('https://fm.skyhub.pk/api/v1/productCategory/add', formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
      });
      console.log('Form submission successful:', response.data);
    } catch (error) {
      throw error;  // Rethrow the error to be handled by the main function
    }
  };

  const handleFormError = (error) => {
    if (error.response) {
      console.error('Error submitting form:', {
        status: error.response.status,
        data: error.response.data,
        headers: error.response.headers,
      });
      alert(`Error: ${error.response.data.message || 'An error occurred. Please try again.'}`);
    } else if (error.request) {
      console.error('Error: No response received:', error.request);
      alert('Error: No response from server. Please check your connection and try again.');
    } else {
      console.error('Error:', error.message);
      alert('Error: ' + error.message);
    }
  };

  const resetForm = () => {
    setCategoryData({
      name: '',
      slug: '',
      meun_order: '',
      parentCategory: '',
      description: '',
      displayType: '',
      thumbnailImage: '',
      bannerImage: '',
      permalink: '',
    });
    setIsEditing(false);
    setEditingCategoryId(null);
    setImagePreview(null); // Reset banner-image preview
    setThumbnailImage(null); // Reset thumbnail-image preview
    setMobileImagePreview(null);
    setMobileThumbnailImage(null);
    fetchTableData();
  };

  // const handleAddCate = async () => {
  //   try {
  //     setLoading(true); // Start loading state

  //     if (isEditing) {
  //       // Handle update logic
  //       await updateCategory(editingCategoryId, categoryData); // Ensure this function handles the update correctly
  //       setIsEditing(false); // Reset to add mode after updating
  //     } else {
  //       // Generate slug and permalink as before
  //       let slugValue = categoryData.slug || categoryData.name
  //         .toLowerCase()
  //         .replace(/\s+/g, '-')
  //         .replace(/[^a-z0-9\-]/g, '');
  //       let permalinkValue = `/category/${slugValue}`;

  //       // Create a FormData object
  //       const formData = new FormData();
  //       formData.append('name', categoryData.name);
  //       formData.append('slug', slugValue);
  //       formData.append('parent', categoryData.parentCategory || '0');
  //       formData.append('description', categoryData.description);
  //       formData.append('display', categoryData.displayType === "show" ? "1" : "0");
  //       formData.append('meun_order', categoryData.meun_order);
  //       formData.append('permalink', permalinkValue);

  //       // Append images if available
  //       const thumbnailImageInput = document.getElementById('thumbnailImage');
  //       if (thumbnailImageInput.files[0]) {
  //         formData.append('image', thumbnailImageInput.files[0]);
  //       }
  //       const bannerImageInput = document.getElementById('bannerImage');
  //       if (bannerImageInput.files[0]) {
  //         formData.append('bannerImage', bannerImageInput.files[0]);
  //       }

  //       console.log('Form submission started with data:', categoryData);
  //       const response = await axios.post('https://fm.skyhub.pk/api/v1/productCategory/add', formData, {
  //         headers: { 'Content-Type': 'multipart/form-data' },
  //       });
  //       console.log('Form submission successful:', response.data);
  //     }

  //     resetForm(); // Ensure this function resets categoryData correctly
  //   } catch (error) {
  //     // Detailed error handling
  //     if (error.response) {
  //       console.error('Error submitting form:', {
  //         status: error.response.status,
  //         data: error.response.data,
  //         headers: error.response.headers,
  //       });
  //       alert(`Error: ${error.response.data.message || 'An error occurred. Please try again.'}`);
  //     } else if (error.request) {
  //       console.error('Error: No response received:', error.request);
  //       alert('Error: No response from server. Please check your connection and try again.');
  //     } else {
  //       console.error('Error:', error.message);
  //       alert('Error: ' + error.message);
  //     }
  //   } finally {
  //     setLoading(false); // End loading state
  //     console.log('Form submission ended.');
  //   }
  // };

  const customStyles = {
    headCells: {
      style: {
        height: '52px',
        borderRadius: '5px 5px 5px 5px',
        background: '#FDFDFD',
        opacity: '1',
        textAlign: 'center',
        justifyContent: 'center',
        border: 'none',
        color: 'var(--text-color)',
        fontFamily: 'poppins',
        fontWeight: '500',
        fontSize: '14px',
        overflow: 'wrap', // Prevents content overflow in headers
        textOverflow: 'ellipsis',
        whiteSpace: 'normal', // Allows wrapping in header cells
      },
    },
    cells: {
      style: {
        height: '66px',
        justifyContent: 'center',
        textAlign: 'center',
        background: '#FFFFFF',
        borderTop: '1px solid #F0F0F0',
        borderRight: 'none',
        color: '#858585',
        fontFamily: 'poppins',
        fontWeight: '400',
        fontSize: '12px',
        whiteSpace: 'normal', // Allows text to wrap in cells
        wordBreak: 'break-word', // Breaks long words if necessary
        overflow: 'wrap', // Prevents content overflow
        textOverflow: 'ellipsis', // Shows ellipsis for long content
      },
    },
  };

  const columns = [
    {
      name: (
        <input
          type="checkbox"
          style={{ margin: 0 }}
          onChange={(e) => handleSelectAll(e.target.checked)}
          checked={selectedRows.length === data.length && data.length > 0}
        />
      ),
      cell: (row) => (
        <input
          type="checkbox"
          style={{ margin: 0 }}
          onChange={() => handleRowSelect(row.uid)}
          checked={selectedRows.includes(row.uid)}
        />
      ),
      ignoreRowClick: true,
      allowOverflow: true,
      button: true,
      width: '50px',
    },
    {
      name: 'Image',
      cell: (row) => (
        <img
          src={row.image ? `http://fm.skyhub.pk${row.image}` : defaultImage}
          alt={row.name}
          width="auto"
          height="40px"
          style={{ objectFit: 'cover' }}
        />
      ),
      width: '100px',
    },
    {
      name: 'Name',
      selector: (row) => row.name,
      width: '120px',
    },
    {
      name: 'Description',
      selector: (row) => row.description,
      width: '150px',
    },
    {
      name: 'Slug',
      selector: (row) => row.slug,
      width: '100px',
    },
    {
      name: 'Count',
      selector: (row) => row.uid,
      width: '80px',
    },
    {
      name: 'Action',
      cell: (row) => {
        const isActive = activeRowId === row._id;

        return (
          <div style={{ position: 'relative' }}>
            <button
              style={{
                width: '30px',
                height: '30px',
                border: 'none',
                borderRadius: '5px',
                boxShadow: '0px 0px 8px 0px #0000001A',
                backgroundColor: 'transparent',
                cursor: 'pointer',
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
                padding: 0,
              }}
              onClick={() => {
                if (isActive) {
                  setActiveRowId(null);
                } else {
                  setActiveRowId(row._id);
                }
              }}
            >
              {isActive ? <AiOutlineMore /> : <AiOutlineEllipsis />} {/* Toggle icons */}
            </button>
            {isActive && (
              <div
                className="dropdown"
                style={{
                  position: 'absolute',
                  top: '10px',
                  right: '30px',
                  transform: 'translateY(-5%)',
                  backgroundColor: 'white',
                  border: 'none',
                  zIndex: 1,
                  width: '184px',
                  height: '167px',
                  boxShadow: 'rgba(0, 0, 0, 0.16) 0px 1px 4px',
                  gap: 10,
                  fontFamily: 'poppins',
                  fontSize: 14,
                  fontWeight: 400,
                }}
              >
                <ul style={{ listStyleType: 'none', padding: '5px', margin: '10px' }}>
                  <li
                    style={{ padding: '5px', cursor: 'pointer' }}
                    onClick={() => handleEdit(row)}
                  >
                    Edit
                  </li>

                  <li
                    style={{ padding: '5px', cursor: 'pointer' }}
                    onClick={() => {
                      console.log('Quick Edit clicked for:', row._id, 'Data:', row);
                    }}
                  >
                    Quick Edit
                  </li>
                  <li
                    style={{ padding: '5px', cursor: 'pointer' }}
                    onClick={() => confirmDelete(row._id)}
                  >
                    Delete
                  </li>
                  <li
                    style={{ padding: '5px', cursor: 'pointer' }}
                    onClick={() => {
                      console.log('View clicked for:', row._id, 'Data:', row);
                    }}
                  >
                    View
                  </li>
                  <li
                    style={{ padding: '5px', cursor: 'pointer' }}
                    onClick={() => {
                      console.log('Duplicate clicked for:', row._id, 'Data:', row);
                    }}
                  >
                    Duplicate
                  </li>
                </ul>
              </div>
            )}
          </div>
        );
      },
      width: '85px',
    }
  ];

  const handleEdit = (row) => {
    setIsEditing(true);
    setEditingCategoryId(row._id);
  
    // Find the parent category name by matching the parent uid with the dropdown options
    const parentCategoryOption = parentCatOpt.find(opt => opt.value === row.parent);
  
    // Populate the form with the data from the selected row
    setCategoryData({
      name: row.name || '',
      slug: row.slug || '',
      meun_order: row.meun_order || '',
      parentCategory: parentCategoryOption ? parentCategoryOption.label : 'Select a parent category',  // Set the parent name instead of uid
      description: row.description || '',
      displayType: row.display === 1 ? 'Show' : 'Hide',
      thumbnailImage: row.image ? `http://fm.skyhub.pk${row.image}` : '',
      bannerImage: row.bannerImage ? `http://fm.skyhub.pk${row.bannerImage}` : '',
      permalink: row.permalink || '',
    });
  
    // Set the preview images based on the data
    const thumbnailPreview = row.image ? `http://fm.skyhub.pk${row.image}` : '';
    const bannerPreview = row.bannerImage ? `http://fm.skyhub.pk${row.bannerImage}` : '';
  
    // Set the state for preview images
    setThumbnailImage(thumbnailPreview); // Update the thumbnail preview state
    setImagePreview(bannerPreview);      // Update the banner preview state
  
    // Debug logs for verification
    console.log('Thumbnail Image Preview:', thumbnailPreview);
    console.log('Banner Image Preview:', bannerPreview);
  };  

  const displayTypeOptions = [
    { value: 'Show', label: 'Show' },
    { value: 'Hide', label: 'Hide' },
  ];

  const handleParentCat = (selectedValue) => {
    setCategoryData((prevState) => ({
      ...prevState,
      parentCategory: selectedValue,  // Update the state with selected value
    }));
  };

  const handleDisplayType = (selectedValue) => {
    setCategoryData((prevState) => ({
      ...prevState,
      displayType: selectedValue,  // Update the state with selected value
    }));
  };

  const confirmDelete = (id) => {
    setCurrentRowId(id); // Set the ID of the item to delete
    setShowConfirm(true); // Show confirmation dialog
  };

  const handleDelete = () => {
    console.log(`Deleting item with ID: ${currentRowId}`); // Log the ID before deletion
    if (currentRowId) {
      deleteItem(currentRowId);
      setShowConfirm(false); // Close the confirmation dialog
    }
  };

  const deleteItem = async (id) => {
    try {
      console.log(`Attempting to delete item with ID: ${id}`); // Log the ID
      const response = await fetch(`https://fm.skyhub.pk/api/v1/productCategory/${id}`, {
        method: 'DELETE',
      });

      if (!response.ok) {
        throw new Error('Network response was not ok');
      }

      const responseData = await response.json(); // Check response data if needed
      console.log(`Delete response: `, responseData);

      console.log(`Item with ID ${id} deleted successfully.`);

      // Update local state to remove the deleted item
      setData((prevItems) => prevItems.filter(item => item._id !== id));

    } catch (error) {
      console.error('Error deleting item:', error);
      alert('Failed to delete the item. Please try again.');
    }
  };

  const cancelDelete = () => {
    setShowConfirm(false); // Close the confirmation dialog
  };

  return (
    <div className="ProductCatPage">
      <div className="CatSection-01">
        <span className='Section1-Leftside'>
          Categories
        </span>
        <div className='Section1-Rightside'>
          <SearchBar onSearch={handleSearch} icon={searchIcon} placeholder="Search category by name" />
        </div>
      </div>

      <div className="CatSection-02">
        <div className='Section2-Leftside'>
          <div className='Header'>{isEditing ? "Edit Category" : "Add New Category"}</div>
          <div className="NewCat-Add">
            {loading && (
              <div className="backdrop">
                <Loader />
              </div>
            )}
            <form onSubmit={(e) => { e.preventDefault(); handleAddCate(); }}>
              <div className="form-row">
                <label htmlFor="name">Name<span className='superscript'>*</span></label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  placeholder="Enter Category Name..."
                  value={categoryData.name}
                  onChange={handleInputChange}
                  required // Optional: Add if field is mandatory
                />
              </div>

              <div className="form-row">
                <label htmlFor="slug">Slug<span className='superscript'>*</span></label>
                <input
                  type="text"
                  id="slug"
                  name="slug"
                  placeholder="Enter Slug..."
                  value={categoryData.slug}
                  onChange={handleInputChange}
                  required
                />
              </div>

              <div className="form-row">
                <label htmlFor="meun_order">Menu Order<span className='superscript'>*</span></label>
                <input
                  type="number" // Change to number for validation
                  id="meun_order"
                  name="meun_order"
                  placeholder='Enter Menu Order...'
                  value={categoryData.meun_order}
                  onChange={handleInputChange}
                  required
                />
              </div>

              <div className="form-row">
                <label htmlFor="parentCategory">
                  Parent Category<span className="superscript">*</span>
                </label>
                <div className="custom-dropdown-wrapper">
                  <CustomDropdown
                    options={parentCatOpt}  // Passing the filtered categories as options
                    selectedOption={categoryData.parentCategory || ''}  // Use '' as default for selected option
                    handleOptionChange={handleParentCat}
                  />
                </div>
              </div>

              <div className="form-row">
                <label htmlFor="description">Description</label>
                <textarea
                  id="description"
                  name="description"
                  placeholder='Enter Product Description here...'
                  value={categoryData.description}
                  onChange={handleInputChange}
                />
              </div>

              <div className="form-row">
                <label htmlFor="displayType">Display Type<span className='superscript'>*</span></label>
                <div className="custom-dropdown-wrapper">
                  <CustomDropdown
                    options={displayTypeOptions}
                    selectedOption={categoryData.displayType}
                    handleOptionChange={handleDisplayType}
                  />
                </div>
              </div>

              {/* <div className="form-row">
                <label htmlFor="thumbnailImage">Thumbnail Image</label>
                <div className="banner-upload">
                  <label htmlFor="thumbnailImage" className="upload-label">
                    <div className="Catupload-button">
                      <img
                        src={uploadIcon}
                        alt=""
                        className="uploaded-image"
                        id="uploaded-image-1"
                      />
                    </div>
                    <span className="upload-text">Click to Upload Image</span>
                  </label>
                  <input
                    type="file"
                    id="thumbnailImage"
                    name="thumbnailImage"
                    className="upload-input"
                    accept="image/*"
                    onChange={handlethumbnailImageUpload}
                    onChange={handleInputChange}
                  />
                </div>
                Optional: Display thumbnail image
                {thumbnailimage && <img src={thumbnailimage} alt="Thumbnail Image" className="image-preview" />}
              </div>

              <div className="form-row">
                <label htmlFor="bannerImage">Banner Image</label>
                <div className="banner-upload">
                  <label htmlFor="bannerImage" className="upload-label">
                    <div className="Catupload-button">
                      <img
                        src={uploadIcon}
                        alt=""
                        className="uploaded-image"
                        id="uploaded-image"
                      />
                    </div>
                    <span className="upload-text">Click to Upload Image</span>
                  </label>
                  <input
                    type="file"
                    id="bannerImage"
                    name="bannerImage"
                    className="upload-input"
                    accept="image/*"
                    onChange={handleImageUpload}
                    onChange={handleInputChange}
                  />
                </div>
                Optional: Display banner image preview
                {imagePreview && <img src={imagePreview} alt="Image Preview" className="image-preview" />}
              </div> */}

              <div className="form-row">
                <label htmlFor="thumbnailImage">Thumbnail Image</label>
                <div className="banner-upload">
                  <label htmlFor="thumbnailImage" className="upload-label">
                    <div className="Catupload-button">
                      <img
                        src={uploadIcon}
                        alt=""
                        className="uploaded-image"
                        id="uploaded-image-1"
                      />
                    </div>
                    <span className="upload-text">Click to Upload Image</span>
                  </label>
                  <input
                    type="file"
                    id="thumbnailImage"
                    name="thumbnailImage"
                    className="upload-input"
                    accept="image/*"
                    onChange={handleInputChange}
                  />
                </div>
                {/* Optional: Display thumbnail image preview */}
                {thumbnailimage && <img src={thumbnailimage} alt="Thumbnail Image" className="image-preview" />}
              </div>

              <div className="form-row">
                <label htmlFor="bannerImage">Banner Image</label>
                <div className="banner-upload">
                  <label htmlFor="bannerImage" className="upload-label">
                    <div className="Catupload-button">
                      <img
                        src={uploadIcon}
                        alt=""
                        className="uploaded-image"
                        id="uploaded-image"
                      />
                    </div>
                    <span className="upload-text">Click to Upload Image</span>
                  </label>
                  <input
                    type="file"
                    id="bannerImage"
                    name="bannerImage"
                    className="upload-input"
                    accept="image/*"
                    onChange={handleInputChange}
                  />
                </div>
                {/* Optional: Display banner image preview */}
                {imagePreview && <img src={imagePreview} alt="Banner Image" className="image-preview" />}
              </div>

              <div className="form-row">
                <label htmlFor="mobilethumbnailImage">Mobile Thumbnail Image</label>
                <div className="banner-upload">
                  <label htmlFor="mobilethumbnailImage" className="upload-label">
                    <div className="Catupload-button">
                      <img
                        src={uploadIcon}
                        alt=""
                        className="uploaded-image"
                        id="uploaded-image-2"
                      />
                    </div>
                    <span className="upload-text">Click to Upload Image</span>
                  </label>
                  <input
                    type="file"
                    id="mobilethumbnailImage"
                    name="mobilethumbnailImage"
                    className="upload-input"
                    accept="image/*"
                    onChange={handlemobilethumbnailImageUpload}
                  />
                </div>
                {/* Optional: Display thumbnail image */}
                {mobilethumbnailimage && <img src={mobilethumbnailimage} alt="Mobile Thumbnail Image" className="image-preview" />}
              </div>

              <div className="form-row">
                <label htmlFor="mobilebannerImage">Mobile Banner Image</label>
                <div className="banner-upload">
                  <label htmlFor="mobilebannerImage" className="upload-label">
                    <div className="Catupload-button">
                      <img
                        src={uploadIcon}
                        alt=""
                        className="uploaded-image"
                        id="uploaded-image-3"
                      />
                    </div>
                    <span className="upload-text">Click to Upload Image</span>
                  </label>
                  <input
                    type="file"
                    id="mobilebannerImage"
                    name="mobilebannerImage"
                    className="upload-input"
                    accept="image/*"
                    onChange={handlemobileImageUpload}
                  />
                </div>
                {/* Optional: Display banner image preview */}
                {mobileimagePreview && <img src={mobileimagePreview} alt="Mobile Image Preview" className="image-preview" />}
              </div>

              <div className="form-row">
                <label>Permalink</label>
                <div className='permaDisplay' title={`https://furnituremecca.zellesolutions.com${categoryData.permalink}`}>https://furnituremecca.zellesolutions.com{categoryData.permalink}</div>
              </div>

              <div className="form-row">
                <TabBarView />
              </div>

              <div className='SubmitBtn'>
                <CustomBtn
                  // label="Add Category"
                  label={isEditing ? "Update Category" : "Add Category"}
                  className="AddCatBtn"
                  onClick={handleAddCate}
                  type="button" // Ensure it's still a button to prevent default submission
                />
              </div>
            </form>
          </div>
        </div >
        <div className='Section2-Rightside'>
          <DataTable
            columns={columns}
            data={Array.isArray(data) ? data.slice((currentPage - 1) * rowsPerPage, currentPage * rowsPerPage) : []}
            pagination
            paginationComponent={() => (
              <CustomPagination
                rowsPerPage={rowsPerPage}
                rowCount={Array.isArray(data) ? data.length : 0}
                currentPage={currentPage}
                onChangePage={handlePageChange}
              />
            )}
            customStyles={customStyles}
          />
        </div>
      </div >

      {showConfirm && (
        <div style={styles.confirmationDialog}>
          <p>Are you sure you want to delete this item?</p>
          <button onClick={handleDelete}>Yes</button>
          <button onClick={cancelDelete}>No</button>
        </div>
      )}


    </div >
  );
};

// Styles for the confirmation dialog
const styles = {
  confirmationDialog: {
    position: 'fixed',
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)',
    padding: '20px',
    backgroundColor: 'white',
    boxShadow: '0 2px 10px rgba(0,0,0,0.1)',
    zIndex: 1000,
    borderRadius: '5px',
  },
};

export default ProductsCat;

// const handleAddCate = async () => {
//   // Use the slug from state, or generate a new one if the slug is empty
//   let slugValue = categoryData.slug || categoryData.name
//     .toLowerCase()
//     .replace(/\s+/g, '-')        // Replace spaces with hyphens
//     .replace(/[^a-z0-9\-]/g, ''); // Remove any non-alphanumeric characters except hyphens

//   let permalinkValue = `/category/${slugValue}`;

//   // Create a FormData object
//   const formData = new FormData();

//   // Append form data
//   formData.append('name', categoryData.name);
//   formData.append('slug', slugValue);  // Use the slug from state or the auto-generated slug

//   // If parentCategory is empty, set it to '0'
//   const parentCategoryValue = categoryData.parentCategory || '0';
//   formData.append('parent', parentCategoryValue);

//   formData.append('description', categoryData.description);

//   // Conditionally set displayType based on the value of categoryData.displayType
//   const displayValue = categoryData.displayType === "show" ? "1" : "0";
//   formData.append('display', displayValue);

//   formData.append('meun_order', categoryData.menuOrder);
//   formData.append('permalink', permalinkValue);  // Use the updated permalink

//   // Append thumbnail image file if exists
//   const thumbnailImageInput = document.getElementById('thumbnailImage');
//   if (thumbnailImageInput.files[0]) {
//     formData.append('image', thumbnailImageInput.files[0]);
//   }

//   // Append banner image file if exists
//   const bannerImageInput = document.getElementById('bannerImage');
//   if (bannerImageInput.files[0]) {
//     formData.append('bannerImage', bannerImageInput.files[0]);
//   }

//   try {
//     setLoading(true); // Start loading state
//     console.log('Form submission started with data:', categoryData);

//     const response = await axios.post('https://fm.skyhub.pk/api/v1/productCategory/add', formData, {
//       headers: {
//         'Content-Type': 'multipart/form-data',
//       },
//     });

//     // Handle successful response
//     console.log('Form submission successful:', response.data);

//     // Optionally reset the form or update the UI here
//     setCategoryData({
//       name: '',
//       slug: '',
//       parentCategory: '',
//       description: '',
//       displayType: '',
//       menuOrder: '',
//       permalink: '', // Reset permalink as well
//     });
//     setImagePreview(null); // Reset banner-image preview
//     setThumbnailImage(null); // Reset thumbnail-image preview
//     fetchTableData();
//   } catch (error) {
//     // Detailed error handling
//     if (error.response) {
//       console.error('Error submitting form:', {
//         status: error.response.status,
//         data: error.response.data,
//         headers: error.response.headers,
//       });
//       alert(`Error: ${error.response.data.message || 'An error occurred. Please try again.'}`);
//     } else if (error.request) {
//       console.error('Error: No response received:', error.request);
//       alert('Error: No response from server. Please check your connection and try again.');
//     } else {
//       console.error('Error:', error.message);
//       alert('Error: ' + error.message);
//     }
//   } finally {
//     setLoading(false); // End loading state
//     console.log('Form submission ended.');
//   }
// };

// const handleSubmit = async (e) => {
//   e.preventDefault();
//   try {
//     setLoading(true); // Start loading state

//     const formData = new FormData();
//     formData.append('name', categoryData.name);
//     formData.append('slug', categoryData.slug);
//     formData.append('parent', categoryData.parentCategory);
//     formData.append('description', categoryData.description);
//     formData.append('display', categoryData.displayType === 'Show' ? '1' : '0');
//     formData.append('meun_order', categoryData.meun_order);
//     formData.append('permalink', categoryData.permalink);

//     // Append images if available
//     const thumbnailInput = document.getElementById('thumbnailImage');
//     if (thumbnailInput.files[0]) {
//       formData.append('thumbnailImage', thumbnailInput.files[0]);
//     }

//     const bannerInput = document.getElementById('bannerImage');
//     if (bannerInput.files[0]) {
//       formData.append('bannerImage', bannerInput.files[0]);
//     }

//     if (isEditing) {
//       await axios.put(`https://fm.skyhub.pk/api/v1/productCategory/${editingCategoryId}`, formData);
//       alert('Category updated successfully.');
//     } else {
//       await axios.post('https://fm.skyhub.pk/api/v1/productCategory/add', formData);
//       alert('Category added successfully.');
//     }

//     // Reset the form after submission
//     resetForm();
//   } catch (error) {
//     console.error('Error submitting form:', error);
//     alert('An error occurred. Please try again.');
//   } finally {
//     setLoading(false); // End loading state
//   }
// };

----------------------------------------------------------------------------------------------------------

Updated ProductCat Component 07-10-2024  Time: 12:30pm
After Completing & Testing All Crud Operations of Product Category section. This is my finest updated product category section handling code.

import React from 'react';
import axios from 'axios';
import { useState, useEffect } from 'react';
import './ECommerce.css';
import '../Page.css';
import CustomBtn from '../../Components/UI-Controls/Buttons/Btn';
import SearchBar from '../../Components/UI-Controls/SearchBar/Search';
import searchIcon from '../../Assets/Images/Search Bar 20 x 20.png';
import uploadIcon from '../../Assets/Images/UploadImg 24 x 24.png';
import DataTable from 'react-data-table-component';
import CustomPagination from '../../Components/UI-Controls/Pagination/Pagination';
import CustomDropdown from '../../Components/UI-Controls/Dropdown/dropdown';
import { AiOutlineEllipsis } from "react-icons/ai";
import { AiOutlineMore } from "react-icons/ai";
import defaultImage from "../../Assets/Images/defaultBannerImage 128 x 128.png";
import Loader from '../../Components/UI-Controls/Loader/Loader';
import TabBarView from '../../Components/UI-Controls/TabView/ProductCatTab'; // Import your TabBarView component

const ProductsCat = () => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [categoryData, setCategoryData] = useState({
    name: '',
    slug: '',
    parentCategory: '0',
    description: '',
    displayType: '',
    meun_order: '',
    permalink: '',
  });
  const [imagePreview, setImagePreview] = useState('');
  const [thumbnailimage, setThumbnailImage] = useState('');
  const [mobileimagePreview, setMobileImagePreview] = useState(null);
  const [mobilethumbnailimage, setMobileThumbnailImage] = useState(null);
  const [activeRowId, setActiveRowId] = useState(null);
  const [selectedRows, setSelectedRows] = useState([]);
  const [parentCatOpt, setParentCatOpt] = useState([]);
  const [showConfirm, setShowConfirm] = useState(false);
  const [currentRowId, setCurrentRowId] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [editingCategoryId, setEditingCategoryId] = useState(null);
  const rowsPerPage = 10;

  useEffect(() => {
    console.log('Fetching data...');
    fetchTableData();
  }, []);

  async function fetchTableData() {
    setLoading(true);
    const URL = 'https://fm.skyhub.pk/api/v1/productCategory/get';

    try {
      const response = await fetch(URL);
      const users = await response.json();
      console.log('The respective data is:', users);
      setLoading(false);

      // Reverse the categories and filter out categories with null or empty parent_name
      const reversedCategories = users.categories.reverse();
      const validParentCategories = reversedCategories
        .filter(cat => cat.name && cat.name.trim() !== '');

      // Map the filtered categories to an array of options
      const parentCatOptions = [
        { value: '', label: 'Select a parent category' }, // Empty option
        ...validParentCategories.map(cat => ({
          value: cat.uid,
          label: cat.name,
        })),
      ];

      // Set the options for the dropdown
      setParentCatOpt(parentCatOptions);
      setData(reversedCategories);  // In case you need the full dataset for other uses
      console.log(parentCatOptions);
    } catch (error) {
      setLoading(false);
      console.error('Error fetching data:', error);
    }
  }

  const handleSearch = () => console.log('Search has been triggered');

  const handlePageChange = (page) => {
    setCurrentPage(page);
  };

  const handleSelectAll = (isSelected) => {
    if (isSelected) {
      const allRowIds = data.map(row => row.uid);
      setSelectedRows(allRowIds);
    } else {
      setSelectedRows([]);
    }
  };

  const handleRowSelect = (rowId) => {
    setSelectedRows(prevSelected => {
      if (prevSelected.includes(rowId)) {
        return prevSelected.filter(id => id !== rowId);
      } else {
        return [...prevSelected, rowId];
      }
    });
  };

  const handleInputChange = (e) => {
    const { name, value, files } = e.target;

    if (name === 'name') {
      // Handle slug and permalink generation from name
      const generatedSlug = value
        .toLowerCase()
        .replace(/\s+/g, '-') // Replace spaces with hyphens
        .replace(/[^a-z0-9\-]/g, ''); // Remove any non-alphanumeric characters except hyphens

      setCategoryData((prevState) => ({
        ...prevState,
        name: value,
        slug: generatedSlug,
        permalink: `/category/${generatedSlug}`,
      }));
    } else if (name === 'slug') {
      // Handle slug update manually
      const formattedSlug = value
        .toLowerCase()
        .replace(/\s+/g, '-') // Replace spaces with hyphens
        .replace(/[^a-z0-9\-]/g, ''); // Remove any non-alphanumeric characters except hyphens

      setCategoryData((prevState) => ({
        ...prevState,
        slug: formattedSlug,
        permalink: `/category/${formattedSlug}`,
      }));
    } else if (name === 'bannerImage' || name === 'thumbnailImage') {
      // Handle image upload for banner or thumbnail
      const file = files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = () => {
          if (name === 'bannerImage') {
            // Update the state for banner image preview and category data
            setImagePreview(reader.result);  // Update the image preview for banner
            setCategoryData((prevState) => ({
              ...prevState,
              bannerImage: file,  // Store the file itself for form submission
            }));
          } else if (name === 'thumbnailImage') {
            // Update the state for thumbnail image preview and category data
            setThumbnailImage(reader.result);  // Update the image preview for thumbnail
            setCategoryData((prevState) => ({
              ...prevState,
              thumbnailImage: file,  // Store the file itself for form submission
            }));
          }
        };
        reader.readAsDataURL(file);  // Read the file to generate a base64 string for preview
      }
    } else {
      // Handle other fields as normal
      setCategoryData((prevState) => ({
        ...prevState,
        [name]: value,
      }));
    }
  };

  // Handle Mobile thumbnail and banner images function w.r.t States....

  const handlemobileImageUpload = (event) => {
    const file = event.target.files[0];
    const reader = new FileReader();
    reader.onload = () => {
      setMobileImagePreview(reader.result);
    };
    if (file) {
      reader.readAsDataURL(file);
    }
  };

  const handlemobilethumbnailImageUpload = (event) => {
    const file = event.target.files[0];
    const reader = new FileReader();
    reader.onload = () => {
      setMobileThumbnailImage(reader.result);
    };
    if (file) {
      reader.readAsDataURL(file);
    }
  };

  // Handle Category Add Form Submission and Update Methods by using Helper Function....

  const handleAddCate = async () => {
    try {
      setLoading(true); // Start loading state

      if (isEditing) {
        await handleUpdateCategory(editingCategoryId);  // Call helper function for update logic
      } else {
        const slugValue = generateSlug(categoryData.name, categoryData.slug);
        const permalinkValue = generatePermalink(slugValue);
        const formData = prepareFormData(categoryData, slugValue, permalinkValue); // Prepare form data

        console.log('Form submission started with data:', categoryData);

        await submitCategory(formData);  // Call helper function to submit the form

        resetForm();  // Reset the form after successful submission
      }
    } catch (error) {
      handleFormError(error);  // Call helper function to handle errors
    } finally {
      setLoading(false);  // End loading state
      console.log('Form submission ended.');
    }
  };

  const handleUpdateCategory = async (editingCategoryId) => {
    try {
      if (!editingCategoryId) {
        console.error('No valid editingCategoryId provided for update');
        alert('Cannot update the category: Missing category ID.');
        return;
      }

      const slugValue = generateSlug(categoryData.name, categoryData.slug);
      const permalinkValue = generatePermalink(slugValue);

      // Prepare the form data for the update
      const formData = prepareFormData(categoryData, slugValue, permalinkValue); // Use the same helper function

      // Debug: Log FormData content
      for (let pair of formData.entries()) {
        console.log(`${pair[0]}: ${pair[1]}`);
      }

      // Debugging log
      console.log('Updating category with ID:', editingCategoryId);
      console.log('Updating category with data:', categoryData);

      // Make the API request to update the category
      const response = await axios.put(`https://fm.skyhub.pk/api/v1/productCategory/${editingCategoryId}`, formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
      });

      console.log('Category updated successfully:', response.data);

      // Reset the form after a successful update
      resetForm();
      setIsEditing(false);  // Exit the editing mode

    } catch (error) {
      handleFormError(error);  // Use your existing error handling logic
    }
  };

  const generateSlug = (name, customSlug) => {
    return customSlug || name
      .toLowerCase()
      .replace(/\s+/g, '-')       // Replace spaces with hyphens
      .replace(/[^a-z0-9\-]/g, '');  // Remove invalid characters
  };

  const generatePermalink = (slugValue) => {
    return `/category/${slugValue}`;
  };

  const prepareFormData = (data, slugValue, permalinkValue) => {
    const formData = new FormData();
    formData.append('name', data.name);
    formData.append('slug', slugValue);
    formData.append('parent', data.parentCategory || '0');
    formData.append('description', data.description);
    formData.append('display', data.displayType === "Show" ? "1" : "0");
    formData.append('meun_order', data.meun_order);
    formData.append('permalink', permalinkValue);

    const thumbnailImageInput = document.getElementById('thumbnailImage');
    if (thumbnailImageInput.files[0]) {
      formData.append('image', thumbnailImageInput.files[0]);
      console.log(thumbnailImageInput.files[0], "thi is")
    }

    const bannerImageInput = document.getElementById('bannerImage');
    if (bannerImageInput.files[0]) {
      formData.append('bannerImage', bannerImageInput.files[0]);
    }


    return formData;  // Return the prepared formData
  };  

  const submitCategory = async (formData) => {
    try {
      const response = await axios.post('https://fm.skyhub.pk/api/v1/productCategory/add', formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
      });
      console.log('Form submission successful:', response.data);
    } catch (error) {
      throw error;  // Rethrow the error to be handled by the main function
    }
  };

  const handleFormError = (error) => {
    if (error.response) {
      console.error('Error submitting form:', {
        status: error.response.status,
        data: error.response.data,
        headers: error.response.headers,
      });
      alert(`Error: ${error.response.data.message || 'An error occurred. Please try again.'}`);
    } else if (error.request) {
      console.error('Error: No response received:', error.request);
      alert('Error: No response from server. Please check your connection and try again.');
    } else {
      console.error('Error:', error.message);
      alert('Error: ' + error.message);
    }
  };

  const resetForm = () => {
    setCategoryData({
      name: '',
      slug: '',
      meun_order: '',
      parentCategory: '',
      description: '',
      displayType: '',
      thumbnailImage: '',
      bannerImage: '',
      permalink: '',
    });
    setIsEditing(false);
    setEditingCategoryId(null);
    setImagePreview(null); // Reset banner-image preview
    setThumbnailImage(null); // Reset thumbnail-image preview
    setMobileImagePreview(null);
    setMobileThumbnailImage(null);
    fetchTableData();
  };

  const customStyles = {
    headCells: {
      style: {
        height: '52px',
        borderRadius: '5px 5px 5px 5px',
        background: '#FDFDFD',
        opacity: '1',
        textAlign: 'center',
        justifyContent: 'center',
        border: 'none',
        color: 'var(--text-color)',
        fontFamily: 'poppins',
        fontWeight: '500',
        fontSize: '14px',
        overflow: 'wrap', // Prevents content overflow in headers
        textOverflow: 'ellipsis',
        whiteSpace: 'normal', // Allows wrapping in header cells
      },
    },
    cells: {
      style: {
        height: '66px',
        justifyContent: 'center',
        textAlign: 'center',
        background: '#FFFFFF',
        borderTop: '1px solid #F0F0F0',
        borderRight: 'none',
        color: '#858585',
        fontFamily: 'poppins',
        fontWeight: '400',
        fontSize: '12px',
        whiteSpace: 'normal', // Allows text to wrap in cells
        wordBreak: 'break-word', // Breaks long words if necessary
        overflow: 'wrap', // Prevents content overflow
        textOverflow: 'ellipsis', // Shows ellipsis for long content
      },
    },
  };

  const columns = [
    {
      name: (
        <input
          type="checkbox"
          style={{ margin: 0 }}
          onChange={(e) => handleSelectAll(e.target.checked)}
          checked={selectedRows.length === data.length && data.length > 0}
        />
      ),
      cell: (row) => (
        <input
          type="checkbox"
          style={{ margin: 0 }}
          onChange={() => handleRowSelect(row.uid)}
          checked={selectedRows.includes(row.uid)}
        />
      ),
      ignoreRowClick: true,
      allowOverflow: true,
      button: true,
      width: '50px',
    },
    {
      name: 'Image',
      cell: (row) => (
        <img
          src={row.image ? `http://fm.skyhub.pk${row.image}` : defaultImage}
          alt={row.name}
          width="auto"
          height="40px"
          style={{ objectFit: 'cover' }}
        />
      ),
      width: '100px',
    },
    {
      name: 'Name',
      selector: (row) => row.name,
      width: '120px',
    },
    {
      name: 'Description',
      selector: (row) => row.description,
      width: '150px',
    },
    {
      name: 'Slug',
      selector: (row) => row.slug,
      width: '100px',
    },
    {
      name: 'Count',
      selector: (row) => row.uid,
      width: '80px',
    },
    {
      name: 'Action',
      cell: (row) => {
        const isActive = activeRowId === row._id;

        return (
          <div style={{ position: 'relative' }}>
            <button
              style={{
                width: '30px',
                height: '30px',
                border: 'none',
                borderRadius: '5px',
                boxShadow: '0px 0px 8px 0px #0000001A',
                backgroundColor: 'transparent',
                cursor: 'pointer',
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
                padding: 0,
              }}
              onClick={() => {
                if (isActive) {
                  setActiveRowId(null);
                } else {
                  setActiveRowId(row._id);
                }
              }}
            >
              {isActive ? <AiOutlineMore /> : <AiOutlineEllipsis />} {/* Toggle icons */}
            </button>
            {isActive && (
              <div
                className="dropdown"
                style={{
                  position: 'absolute',
                  top: '10px',
                  right: '30px',
                  transform: 'translateY(-5%)',
                  backgroundColor: 'white',
                  border: 'none',
                  zIndex: 1,
                  width: '184px',
                  height: '167px',
                  boxShadow: 'rgba(0, 0, 0, 0.16) 0px 1px 4px',
                  gap: 10,
                  fontFamily: 'poppins',
                  fontSize: 14,
                  fontWeight: 400,
                }}
              >
                <ul style={{ listStyleType: 'none', padding: '5px', margin: '10px' }}>
                  <li
                    style={{ padding: '5px', cursor: 'pointer' }}
                    onClick={() => handleEdit(row)}
                  >
                    Edit
                  </li>

                  <li
                    style={{ padding: '5px', cursor: 'pointer' }}
                    onClick={() => {
                      console.log('Quick Edit clicked for:', row._id, 'Data:', row);
                    }}
                  >
                    Quick Edit
                  </li>
                  <li
                    style={{ padding: '5px', cursor: 'pointer' }}
                    onClick={() => confirmDelete(row._id)}
                  >
                    Delete
                  </li>
                  <li
                    style={{ padding: '5px', cursor: 'pointer' }}
                    onClick={() => {
                      console.log('View clicked for:', row._id, 'Data:', row);
                    }}
                  >
                    View
                  </li>
                  <li
                    style={{ padding: '5px', cursor: 'pointer' }}
                    onClick={() => {
                      console.log('Duplicate clicked for:', row._id, 'Data:', row);
                    }}
                  >
                    Duplicate
                  </li>
                </ul>
              </div>
            )}
          </div>
        );
      },
      width: '85px',
    }
  ];

  const handleEdit = (row) => {
    setIsEditing(true);
    setEditingCategoryId(row._id);
  
    // Find the parent category name by matching the parent uid with the dropdown options
    const parentCategoryOption = parentCatOpt.find(opt => opt.value === row.parent);
  
    // Populate the form with the data from the selected row
    setCategoryData({
      name: row.name || '',
      slug: row.slug || '',
      meun_order: row.meun_order || '',
      parentCategory: parentCategoryOption ? parentCategoryOption.label : 'Select a parent category',  // Set the parent name instead of uid
      description: row.description || '',
      displayType: row.display === 1 ? 'Show' : 'Hide',
      thumbnailImage: row.image ? `http://fm.skyhub.pk${row.image}` : '',
      bannerImage: row.bannerImage ? `http://fm.skyhub.pk${row.bannerImage}` : '',
      permalink: row.permalink || '',
    });
  
    // Set the preview images based on the data
    const thumbnailPreview = row.image ? `http://fm.skyhub.pk${row.image}` : '';
    const bannerPreview = row.bannerImage ? `http://fm.skyhub.pk${row.bannerImage}` : '';
  
    // Set the state for preview images
    setThumbnailImage(thumbnailPreview); // Update the thumbnail preview state
    setImagePreview(bannerPreview);      // Update the banner preview state
  
    // Debug logs for verification
    console.log('Thumbnail Image Preview:', thumbnailPreview);
    console.log('Banner Image Preview:', bannerPreview);
  };  

  const displayTypeOptions = [
    { value: 'Show', label: 'Show' },
    { value: 'Hide', label: 'Hide' },
  ];

  const handleParentCat = (selectedValue) => {
    setCategoryData((prevState) => ({
      ...prevState,
      parentCategory: selectedValue,
    }));
  };

  const handleDisplayType = (selectedValue) => {
    setCategoryData((prevState) => ({
      ...prevState,
      displayType: selectedValue,
    }));
  };

  // Category Delete Functions...

  const confirmDelete = (id) => {
    setCurrentRowId(id); // Set the ID of the item to delete
    setShowConfirm(true); // Show confirmation dialog
  };

  const handleDelete = () => {
    console.log(`Deleting item with ID: ${currentRowId}`); // Log the ID before deletion
    if (currentRowId) {
      deleteItem(currentRowId);
      setShowConfirm(false); // Close the confirmation dialog
    }
  };

  const deleteItem = async (id) => {
    try {
      console.log(`Attempting to delete item with ID: ${id}`); // Log the ID
      const response = await fetch(`https://fm.skyhub.pk/api/v1/productCategory/${id}`, {
        method: 'DELETE',
      });

      if (!response.ok) {
        throw new Error('Network response was not ok');
      }

      const responseData = await response.json(); // Check response data if needed
      console.log(`Delete response: `, responseData);

      console.log(`Item with ID ${id} deleted successfully.`);

      // Update local state to remove the deleted item
      setData((prevItems) => prevItems.filter(item => item._id !== id));

    } catch (error) {
      console.error('Error deleting item:', error);
      alert('Failed to delete the item. Please try again.');
    }
  };

  const cancelDelete = () => {
    setShowConfirm(false); // Close the confirmation dialog
  };

  return (
    <div className="ProductCatPage">
      <div className="CatSection-01">
        <span className='Section1-Leftside'>
          Categories
        </span>
        <div className='Section1-Rightside'>
          <SearchBar onSearch={handleSearch} icon={searchIcon} placeholder="Search category by name" />
        </div>
      </div>

      <div className="CatSection-02">
        <div className='Section2-Leftside'>
          <div className='Header'>{isEditing ? "Edit Category" : "Add New Category"}</div>
          <div className="NewCat-Add">
            {loading && (
              <div className="backdrop">
                <Loader />
              </div>
            )}
            <form onSubmit={(e) => { e.preventDefault(); handleAddCate(); }}>
              <div className="form-row">
                <label htmlFor="name">Name<span className='superscript'>*</span></label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  placeholder="Enter Category Name..."
                  value={categoryData.name}
                  onChange={handleInputChange}
                  required // Optional: Add if field is mandatory
                />
              </div>

              <div className="form-row">
                <label htmlFor="slug">Slug<span className='superscript'>*</span></label>
                <input
                  type="text"
                  id="slug"
                  name="slug"
                  placeholder="Enter Slug..."
                  value={categoryData.slug}
                  onChange={handleInputChange}
                  required
                />
              </div>

              <div className="form-row">
                <label htmlFor="meun_order">Menu Order<span className='superscript'>*</span></label>
                <input
                  type="number" // Change to number for validation
                  id="meun_order"
                  name="meun_order"
                  placeholder='Enter Menu Order...'
                  value={categoryData.meun_order}
                  onChange={handleInputChange}
                  required
                />
              </div>

              <div className="form-row">
                <label htmlFor="parentCategory">
                  Parent Category<span className="superscript">*</span>
                </label>
                <div className="custom-dropdown-wrapper">
                  <CustomDropdown
                    options={parentCatOpt}  // Passing the filtered categories as options
                    selectedOption={categoryData.parentCategory || ''}  // Use '' as default for selected option
                    handleOptionChange={handleParentCat}
                  />
                </div>
              </div>

              <div className="form-row">
                <label htmlFor="description">Description</label>
                <textarea
                  id="description"
                  name="description"
                  placeholder='Enter Product Description here...'
                  value={categoryData.description}
                  onChange={handleInputChange}
                />
              </div>

              <div className="form-row">
                <label htmlFor="displayType">Display Type<span className='superscript'>*</span></label>
                <div className="custom-dropdown-wrapper">
                  <CustomDropdown
                    options={displayTypeOptions}
                    selectedOption={categoryData.displayType}
                    handleOptionChange={handleDisplayType}
                  />
                </div>
              </div>

              <div className="form-row">
                <label htmlFor="thumbnailImage">Thumbnail Image</label>
                <div className="banner-upload">
                  <label htmlFor="thumbnailImage" className="upload-label">
                    <div className="Catupload-button">
                      <img
                        src={uploadIcon}
                        alt=""
                        className="uploaded-image"
                        id="uploaded-image-1"
                      />
                    </div>
                    <span className="upload-text">Click to Upload Image</span>
                  </label>
                  <input
                    type="file"
                    id="thumbnailImage"
                    name="thumbnailImage"
                    className="upload-input"
                    accept="image/*"
                    onChange={handleInputChange}
                  />
                </div>
                {/* Optional: Display thumbnail image preview */}
                {thumbnailimage && <img src={thumbnailimage} alt="Thumbnail Image" className="image-preview" />}
              </div>

              <div className="form-row">
                <label htmlFor="bannerImage">Banner Image</label>
                <div className="banner-upload">
                  <label htmlFor="bannerImage" className="upload-label">
                    <div className="Catupload-button">
                      <img
                        src={uploadIcon}
                        alt=""
                        className="uploaded-image"
                        id="uploaded-image"
                      />
                    </div>
                    <span className="upload-text">Click to Upload Image</span>
                  </label>
                  <input
                    type="file"
                    id="bannerImage"
                    name="bannerImage"
                    className="upload-input"
                    accept="image/*"
                    onChange={handleInputChange}
                  />
                </div>
                {/* Optional: Display banner image preview */}
                {imagePreview && <img src={imagePreview} alt="Banner Image" className="image-preview" />}
              </div>

              <div className="form-row">
                <label htmlFor="mobilethumbnailImage">Mobile Thumbnail Image</label>
                <div className="banner-upload">
                  <label htmlFor="mobilethumbnailImage" className="upload-label">
                    <div className="Catupload-button">
                      <img
                        src={uploadIcon}
                        alt=""
                        className="uploaded-image"
                        id="uploaded-image-2"
                      />
                    </div>
                    <span className="upload-text">Click to Upload Image</span>
                  </label>
                  <input
                    type="file"
                    id="mobilethumbnailImage"
                    name="mobilethumbnailImage"
                    className="upload-input"
                    accept="image/*"
                    onChange={handlemobilethumbnailImageUpload}
                  />
                </div>
                {/* Optional: Display thumbnail image */}
                {mobilethumbnailimage && <img src={mobilethumbnailimage} alt="Mobile Thumbnail Image" className="image-preview" />}
              </div>

              <div className="form-row">
                <label htmlFor="mobilebannerImage">Mobile Banner Image</label>
                <div className="banner-upload">
                  <label htmlFor="mobilebannerImage" className="upload-label">
                    <div className="Catupload-button">
                      <img
                        src={uploadIcon}
                        alt=""
                        className="uploaded-image"
                        id="uploaded-image-3"
                      />
                    </div>
                    <span className="upload-text">Click to Upload Image</span>
                  </label>
                  <input
                    type="file"
                    id="mobilebannerImage"
                    name="mobilebannerImage"
                    className="upload-input"
                    accept="image/*"
                    onChange={handlemobileImageUpload}
                  />
                </div>
                {/* Optional: Display banner image preview */}
                {mobileimagePreview && <img src={mobileimagePreview} alt="Mobile Image Preview" className="image-preview" />}
              </div>

              <div className="form-row">
                <label>Permalink</label>
                <div className='permaDisplay' title={`https://furnituremecca.zellesolutions.com${categoryData.permalink}`}>https://furnituremecca.zellesolutions.com{categoryData.permalink}</div>
              </div>

              <div className="form-row">
                <TabBarView />
              </div>

              <div className='SubmitBtn'>
                <CustomBtn
                  // label="Add Category"
                  label={isEditing ? "Update Category" : "Add Category"}
                  className="AddCatBtn"
                  onClick={handleAddCate}
                  type="button" // Ensure it's still a button to prevent default submission
                />
              </div>
            </form>
          </div>
        </div >
        <div className='Section2-Rightside'>
          <DataTable
            columns={columns}
            data={Array.isArray(data) ? data.slice((currentPage - 1) * rowsPerPage, currentPage * rowsPerPage) : []}
            pagination
            paginationComponent={() => (
              <CustomPagination
                rowsPerPage={rowsPerPage}
                rowCount={Array.isArray(data) ? data.length : 0}
                currentPage={currentPage}
                onChangePage={handlePageChange}
              />
            )}
            customStyles={customStyles}
          />
        </div>
      </div >

      {showConfirm && (
        <div style={styles.confirmationDialog}>
          <p>Are you sure you want to delete this item?</p>
          <button onClick={handleDelete}>Yes</button>
          <button onClick={cancelDelete}>No</button>
        </div>
      )}


    </div >
  );
};

// Styles for the confirmation dialog
const styles = {
  confirmationDialog: {
    position: 'fixed',
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)',
    padding: '20px',
    backgroundColor: 'white',
    boxShadow: '0 2px 10px rgba(0,0,0,0.1)',
    zIndex: 1000,
    borderRadius: '5px',
  },
};

export default ProductsCat;
